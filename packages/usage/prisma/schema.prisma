//
// Autogenerated by `prisma-import`
// Any modifications will be overwritten on subsequent runs.
//

//
// index.generic
//

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["social", "quiz", "users", "article", "tournament", "event", "payment", "loyalty", "system", "commerce", "catalogue"]
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
  binaryTargets   = ["native", "linux-musl-openssl-3.0.x"]
}

generator zod {
  provider                         = "ts-node ../generator/src/bin.ts"
  // provider                         = "zod-prisma-types"
  output                           = "./generated/zod" // default is ./generated/zod
  useMultipleFiles                 = false // default is false
  writeBarrelFiles                 = false // default is true
  createInputTypes                 = true // default is true
  createModelTypes                 = true // default is true
  addInputTypeValidation           = false // default is true
  addIncludeType                   = true // default is true
  addSelectType                    = false // default is true
  validateWhereUniqueInput         = false // default is false
  createOptionalDefaultValuesTypes = false // default is false
  createRelationValuesTypes        = true // default is false
  createPartialTypes               = false // default is false
  useDefaultValidators             = false // default is true
  coerceDate                       = false // default is true
  writeNullishInModelTypes         = false // default is false
  onlyModels                       = false // default is false
}

//
// article.prisma
//

model ArticleAuthor {
  articleId   Int
  userId      Int?
  role        enum_articleAuthors_role @default(AUTHOR)
  createdAt   DateTime                 @db.Timestamptz(6)
  updatedAt   DateTime                 @db.Timestamptz(6)
  deletedAt   DateTime?                @db.Timestamptz(6)
  id          Int                      @id(map: "articleauthors_pk") @unique(map: "articleauthors_id_uindex") @default(autoincrement())
  displayName String?                  @db.VarChar(255)
  articles    Article                  @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@unique([articleId, userId], map: "articleAuthors_pkey")
  @@map("articleAuthors")
  @@schema("article")
}

model ArticleBlock {
  id        Int                     @id @default(autoincrement())
  articleId Int
  authorId  Int
  name      String?                 @default("UNTITLED") @db.VarChar(255)
  type      enum_articleBlocks_type @default(TITLE)
  data      Json?                   @db.Json
  createdAt DateTime                @default(now()) @db.Timestamptz(6)
  updatedAt DateTime                @updatedAt() @db.Timestamptz(6)
  deletedAt DateTime?               @db.Timestamptz(6)
  isPreview Boolean                 @default(false)
  sort      Int                     @default(0)
  locale    String?                 @db.VarChar
  articles  Article                 @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@index([articleId(sort: Desc)], map: "articleBlock_articleId_index")
  @@map("articleBlocks")
  @@schema("article")
}

model ArticleCategory {
  id        Int       @id @default(autoincrement())
  clientId  Int
  name      String    @default("UNTITLED") @db.VarChar(255)
  parentId  Int?
  createdAt DateTime  @db.Timestamptz(6)
  updatedAt DateTime  @db.Timestamptz(6)
  deletedAt DateTime? @db.Timestamptz(6)
  articles  Article[]

  @@map("articleCategories")
  @@schema("article")
}

model ArticleLink {
  articleId  Int
  entityId   Int
  entityType enum_articleLinks_entityType @default(TEAM)
  createdAt  DateTime                     @db.Timestamptz(6)
  updatedAt  DateTime                     @db.Timestamptz(6)
  deletedAt  DateTime?                    @db.Timestamptz(6)
  id         Int                          @id(map: "articlelinks_pk") @unique(map: "articlelinks_id_uindex") @default(autoincrement())
  articles   Article                      @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@unique([articleId, entityId, entityType], map: "articleLinks_pkey")
  @@map("articleLinks")
  @@schema("article")
}

model ArticleLog {
  id        Int                   @id @default(autoincrement())
  articleId Int
  authorId  Int
  state     enum_articleLog_state @default(DRAFT)
  data      Json?                 @db.Json
  createdAt DateTime              @db.Timestamptz(6)
  updatedAt DateTime              @db.Timestamptz(6)
  deletedAt DateTime?             @db.Timestamptz(6)
  articles  Article               @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@map("articleLog")
  @@schema("article")
}

model ArticleTag {
  articleId Int
  tag       String?   @db.VarChar(255)
  createdAt DateTime  @db.Timestamptz(6)
  updatedAt DateTime  @db.Timestamptz(6)
  id        Int       @id(map: "articletags_pk") @unique(map: "articletags_id_uindex") @default(autoincrement())
  deletedAt DateTime? @db.Timestamptz(0)
  tagId     Int?
  articles  Article   @relation(fields: [articleId], references: [id], onDelete: Cascade)
  tags      tags?     @relation(fields: [tagId], references: [id], onDelete: Cascade, map: "articletags_fk")

  @@unique([articleId, tag], map: "articleTags_pkey")
  @@unique([articleId, tagId], map: "articletags_un")
  @@map("articleTags")
  @@schema("article")
}

/// @TypeGraphQL.type(name: "omitArticle")
model Article {
  id          Int                 @id @default(autoincrement())
  clientId    Int
  categoryId  Int
  state       enum_articles_state @default(DRAFT)
  publishedAt DateTime?           @db.Timestamptz(6)
  createdAt   DateTime            @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime            @updatedAt() @db.Timestamptz(6)
  deletedAt   DateTime?           @db.Timestamptz(6)
  meta        Json?               @db.Json
  localeId    Int?                @default(1)
  url         String?             @db.VarChar
  slug        String?             @db.VarChar
  authors     ArticleAuthor[]
  blocks      ArticleBlock[]
  links       ArticleLink[]
  log         ArticleLog[]
  tags        ArticleTag[]
  category    ArticleCategory     @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([categoryId, slug], map: "articles_categoryId_slug")
  @@map("articles")
  @@schema("article")
}

model tags {
  id          Int          @id @default(autoincrement())
  clientId    Int
  name        String       @db.VarChar(255)
  source      String?      @db.VarChar(255)
  createdAt   DateTime     @db.Timestamptz(6)
  updatedAt   DateTime     @db.Timestamptz(6)
  articleTags ArticleTag[]

  @@unique([name, clientId], map: "tags_name_clientId")
  @@schema("article")
}

//
// catalogue.prisma
//

model CatalogueData {
  id                       Int                        @id @default(autoincrement())
  fieldId                  Int
  localeId                 Int?
  instanceId               Int
  value                    String?                    @db.VarChar(1024)
  createdAt                DateTime                   @db.Timestamptz(6)
  updatedAt                DateTime                   @db.Timestamptz(6)
  catalogueFields          CatalogueField             @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  catalogues               Catalogue                  @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  catalogueDataTranslation CatalogueDataTranslation[]

  @@index([value], map: "catalogue_data_value")
  @@map("_catalogueData")
  @@schema("catalogue")
}

model CatalogueDataTranslation {
  id            Int           @id @default(autoincrement())
  localeId      Int
  dataId        Int
  value         String        @db.VarChar(255)
  createdAt     DateTime      @db.Timestamptz(6)
  updatedAt     DateTime      @db.Timestamptz(6)
  catalogueData CatalogueData @relation(fields: [dataId], references: [id], onDelete: NoAction)

  @@index([dataId, localeId], map: "catalogue_data_translation_data_id_locale_id")
  @@map("_catalogueDataTranslation")
  @@schema("catalogue")
}

model CatalogueFieldTranslation {
  id              Int            @id @default(autoincrement())
  localeId        Int
  fieldId         Int
  value           String         @db.VarChar(255)
  createdAt       DateTime       @db.Timestamptz(6)
  updatedAt       DateTime       @db.Timestamptz(6)
  catalogueFields CatalogueField @relation(fields: [fieldId], references: [id], onDelete: Cascade)

  @@index([fieldId, localeId], map: "catalogue_field_translation_field_id_locale_id")
  @@map("_catalogueFieldTranslation")
  @@schema("catalogue")
}

model CatalogueField {
  id                        Int                            @id @default(autoincrement())
  clientId                  Int
  relationId                Int
  name                      String                         @db.VarChar(255)
  dataType                  enum__catalogueFields_dataType
  isReadOnly                Boolean                        @default(false)
  i18n                      Int?
  sort                      Int
  createdAt                 DateTime                       @db.Timestamptz(6)
  updatedAt                 DateTime                       @db.Timestamptz(6)
  catalogueData             CatalogueData[]
  catalogueFieldTranslation CatalogueFieldTranslation[]
  Catalogue                 Catalogue?                     @relation(fields: [catalogueId], references: [id])
  catalogueId               Int?

  @@index([relationId], map: "catalogue_fields_relation_id")
  @@map("_catalogueFields")
  @@schema("catalogue")
}

model CatalogueItemData {
  id           Int                            @id @default(autoincrement())
  fieldId      Int
  localeId     Int?
  instanceId   Int
  value        String?                        @db.VarChar(1024)
  createdAt    DateTime                       @db.Timestamptz(6)
  updatedAt    DateTime                       @db.Timestamptz(6)
  field        CatalogueItemField             @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  item         CatalogueItem                  @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  translations CatalogueItemDataTranslation[]

  @@index([value], map: "catalogue_item_data_value")
  @@map("_catalogueItemData")
  @@schema("catalogue")
}

model CatalogueItemDataTranslation {
  id                Int               @id @default(autoincrement())
  localeId          Int
  dataId            Int
  value             String            @db.VarChar(255)
  createdAt         DateTime          @db.Timestamptz(6)
  updatedAt         DateTime          @db.Timestamptz(6)
  catalogueItemData CatalogueItemData @relation(fields: [dataId], references: [id], onDelete: NoAction)

  @@index([dataId, localeId], map: "catalogue_item_data_translation_data_id_locale_id")
  @@map("_catalogueItemDataTranslation")
  @@schema("catalogue")
}

model CatalogueItemFieldTranslation {
  id                  Int                @id @default(autoincrement())
  localeId            Int
  fieldId             Int
  value               String             @db.VarChar(255)
  createdAt           DateTime           @db.Timestamptz(6)
  updatedAt           DateTime           @db.Timestamptz(6)
  catalogueItemFields CatalogueItemField @relation(fields: [fieldId], references: [id], onDelete: Cascade)

  @@index([fieldId, localeId], map: "catalogue_item_field_translation_field_id_locale_id")
  @@map("_catalogueItemFieldTranslation")
  @@schema("catalogue")
}

model CatalogueItemField {
  id                            Int                                @id @default(autoincrement())
  clientId                      Int
  relationId                    Int
  name                          String                             @db.VarChar(255)
  dataType                      enum__catalogueItemFields_dataType
  isReadOnly                    Boolean                            @default(false)
  sort                          Int
  createdAt                     DateTime                           @db.Timestamptz(6)
  updatedAt                     DateTime                           @db.Timestamptz(6)
  i18n                          Int?
  catalogueItemData             CatalogueItemData[]
  catalogueItemFieldTranslation CatalogueItemFieldTranslation[]

  @@index([relationId], map: "catalogue_item_fields_relation_id")
  @@map("_catalogueItemFields")
  @@schema("catalogue")
}

model CatalogueItemPrice {
  id              Int           @id @default(autoincrement())
  currencyId      Int?
  value           Float?
  catalogueItemId Int
  createdAt       DateTime      @db.Timestamptz(6)
  updatedAt       DateTime      @db.Timestamptz(6)
  catalogueItems  CatalogueItem @relation(fields: [catalogueItemId], references: [id], onDelete: Cascade)
  currency        Currency?     @relation(fields: [currencyId], references: [id])

  @@index([catalogueItemId], map: "catalogueItemPrices_catalogueItemId")
  @@index([currencyId], map: "catalogueItemPrices_currencyId")
  @@index([value], map: "catalogueItemPrices_value")
  @@map("catalogueItemPrices")
  @@schema("catalogue")
}

model CatalogueItem {
  id                Int                       @id @default(autoincrement())
  state             enum_catalogueItems_state @default(INACTIVE)
  createdAt         DateTime                  @db.Timestamptz(6)
  updatedAt         DateTime                  @db.Timestamptz(6)
  catalogueId       Int?
  name              String?                   @db.VarChar
  preview           String?                   @db.VarChar
  eventId           Int[]
  data              CatalogueItemData[]
  prices            CatalogueItemPrice[]
  catalogues        Catalogue?                @relation(fields: [catalogueId], references: [id])
  relations         CatalogueRelation[]       @relation("catalogueRelations_itemIdTocatalogueItems")
  items             CatalogueRelation[]       @relation("catalogueRelations_parentIdTocatalogueItems")
  CommerceOrderItem CommerceOrderItem[]

  @@index([catalogueId], map: "catalogueItems_catalogueId")
  @@index([state], map: "catalogueItems_state")
  @@map("catalogueItems")
  @@schema("catalogue")
}

model CatalogueRelation {
  id        Int                          @id @default(autoincrement())
  sort      Int                          @default(0)
  createdAt DateTime                     @db.Timestamptz(6)
  updatedAt DateTime                     @db.Timestamptz(6)
  parentId  Int?
  itemId    Int?
  type      enum_catalogueRelations_type
  items     CatalogueItem?               @relation("catalogueRelations_itemIdTocatalogueItems", fields: [itemId], references: [id], onDelete: Cascade)
  parents   CatalogueItem?               @relation("catalogueRelations_parentIdTocatalogueItems", fields: [parentId], references: [id], onDelete: Cascade)

  @@index([itemId], map: "catalogueRelations_itemId")
  @@index([parentId], map: "catalogueRelations_parentId")
  @@map("catalogueRelations")
  @@schema("catalogue")
}

model Catalogue {
  id              Int                   @id @default(autoincrement())
  clientId        Int
  state           enum_catalogues_state @default(INACTIVE)
  name            String                @db.VarChar(255)
  description     String?               @db.VarChar(255)
  localeIdx       Int[]
  currencyIdx     Int[]
  createdAt       DateTime              @db.Timestamptz(6)
  updatedAt       DateTime              @db.Timestamptz(6)
  preview         String?               @db.VarChar(255)
  catalogueData   CatalogueData[]
  catalogueFields CatalogueField[]
  catalogueItems  CatalogueItem[]

  @@index([clientId, state], map: "catalogues_client_id_state")
  @@map("catalogues")
  @@schema("catalogue")
}

//
// commerce.prisma
//

model CommerceOrder {
  id               Int                      @id @default(autoincrement())
  shopId           Int
  clientId         Int
  state            enum_orders_state        @default(NEW)
  paymentState     enum_orders_paymentState @default(UNPAID)
  userId           Int
  externalEntityId Int?
  code             String?
  total            Float                    @default(0) // Сумма заказа
  paidAmount       Float                    @default(0) // Сумма заказа 
  paymentStartedAt DateTime? // Время инициализации платежа (initPayment). Фиксируем, чтобы потом следить
  data             CommerceOrderData[]
  items            CommerceOrderItem[]
  user             User                     @relation(fields: [userId], references: [id])
  createdAt        DateTime                 @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime                 @updatedAt() @db.Timestamptz(6)

  @@map("orders")
  @@schema("commerce")
}

model CommerceOrderData {
  id           Int                @id @default(autoincrement())
  value        String
  orderFieldId Int
  field        CommerceOrderField @relation(fields: [orderFieldId], references: [id], onDelete: NoAction)
  orderItemId  Int?
  orderId      Int
  order        CommerceOrder      @relation(fields: [orderId], references: [id])
  createdAt    DateTime           @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime           @updatedAt() @db.Timestamptz(6)

  @@map("orderData")
  @@schema("commerce")
}

model CommerceOrderField {
  id                Int                       @id @default(autoincrement())
  shopId            Int
  name              String
  dataType          enum_orderFields_dataType
  hasLocale         Boolean
  sort              Int
  createdAt         DateTime                  @default(now()) @db.Timestamptz(6)
  updatedAt         DateTime                  @updatedAt() @db.Timestamptz(6)
  CommerceOrderData CommerceOrderData[]

  @@map("orderFields")
  @@schema("commerce")
}

model CommerceOrderItem {
  id              Int                   @id @default(autoincrement())
  orderId         Int
  commerceOrder   CommerceOrder         @relation(fields: [orderId], references: [id], onDelete: NoAction)
  state           enum_orderItems_state @default(ACTIVE)
  catalogueItemId Int
  discountId      Int?
  currencyId      Int
  qty             Int
  price           Float
  discountedPrice Float?
  total           Float // Сумма позиций
  catalogueItem   CatalogueItem         @relation(fields: [catalogueItemId], references: [id], onDelete: NoAction)

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt() @db.Timestamptz(6)

  @@map("orderItems")
  @@schema("commerce")
}

model Shop {
  id          Int              @id @default(autoincrement())
  clientId    Int
  state       enum_shops_state
  name        String
  description String?
  codeMask    String?
  catalogueId Int
  currencyId  Int?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  saleEnabled Boolean
  settings    Json?

  @@map("shops")
  @@schema("commerce")
}

//
// event.prisma
//

model EventData {
  id                   Int                    @id @default(autoincrement())
  fieldId              Int
  localeId             Int?
  instanceId           Int
  value                String?                @db.VarChar(1024)
  createdAt            DateTime               @db.Timestamptz(6)
  updatedAt            DateTime               @db.Timestamptz(6)
  field                EventField             @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  events               Event                  @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  eventDataTranslation EventDataTranslation[]

  @@index([fieldId], map: "_eventData_fieldId")
  @@index([instanceId(sort: Desc)], map: "_eventData_instanceId")
  @@index([value], map: "event_data_value")
  @@map("_eventData")
  @@schema("event")
}

model EventDataTranslation {
  id        Int       @id @default(autoincrement())
  localeId  Int
  dataId    Int
  value     String    @db.VarChar(255)
  createdAt DateTime  @db.Timestamptz(6)
  updatedAt DateTime  @db.Timestamptz(6)
  eventData EventData @relation(fields: [dataId], references: [id], onDelete: NoAction)

  @@index([dataId, localeId], map: "event_data_translation_data_id_locale_id")
  @@map("_eventDataTranslation")
  @@schema("event")
}

model EventFieldTranslation {
  id          Int        @id @default(autoincrement())
  localeId    Int
  fieldId     Int
  value       String     @db.VarChar(255)
  createdAt   DateTime   @db.Timestamptz(6)
  updatedAt   DateTime   @db.Timestamptz(6)
  eventFields EventField @relation(fields: [fieldId], references: [id], onDelete: Cascade)

  @@index([fieldId, localeId], map: "event_field_translation_field_id_locale_id")
  @@map("_eventFieldTranslation")
  @@schema("event")
}

model EventField {
  id                    Int                        @id @default(autoincrement())
  clientId              Int
  relationId            Int
  name                  String                     @db.VarChar(255)
  dataType              enum__eventFields_dataType
  isReadOnly            Boolean                    @default(false)
  sort                  Int
  createdAt             DateTime                   @db.Timestamptz(6)
  updatedAt             DateTime                   @db.Timestamptz(6)
  i18n                  Int?
  eventData             EventData[]
  eventFieldTranslation EventFieldTranslation[]

  @@index([relationId], map: "event_fields_relation_id")
  @@map("_eventFields")
  @@schema("event")
}

model EventOrderData {
  id                        Int                         @id @default(autoincrement())
  fieldId                   Int
  localeId                  Int?
  instanceId                Int
  value                     String?                     @db.VarChar(1024)
  createdAt                 DateTime                    @default(now()) @db.Timestamptz(6)
  updatedAt                 DateTime                    @default(now()) @db.Timestamptz(6)
  field                     EventOrderField             @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  eventOrders               EventOrder                  @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  eventOrderDataTranslation EventOrderDataTranslation[]

  @@unique([instanceId, fieldId], map: "_eventOrderData_fieldId_instanceId")
  @@index([fieldId], map: "_eventOrderData_fieldId")
  @@index([instanceId(sort: Desc)], map: "_eventOrderData_instanceId")
  @@index([value], map: "event_order_data_value")
  @@map("_eventOrderData")
  @@schema("event")
}

model EventOrderDataTranslation {
  id             Int            @id @default(autoincrement())
  localeId       Int
  dataId         Int
  value          String         @db.VarChar(255)
  createdAt      DateTime       @db.Timestamptz(6)
  updatedAt      DateTime       @db.Timestamptz(6)
  eventOrderData EventOrderData @relation(fields: [dataId], references: [id], onDelete: NoAction)

  @@index([dataId, localeId], map: "event_order_data_translation_data_id_locale_id")
  @@map("_eventOrderDataTranslation")
  @@schema("event")
}

model EventOrderFieldTranslation {
  id               Int             @id @default(autoincrement())
  localeId         Int
  fieldId          Int
  value            String          @db.VarChar(255)
  createdAt        DateTime        @db.Timestamptz(6)
  updatedAt        DateTime        @db.Timestamptz(6)
  eventOrderFields EventOrderField @relation(fields: [fieldId], references: [id], onDelete: Cascade)

  @@index([fieldId, localeId], map: "event_order_field_translation_field_id_locale_id")
  @@map("_eventOrderFieldTranslation")
  @@schema("event")
}

model EventOrderField {
  id                         Int                             @id @default(autoincrement())
  clientId                   Int
  relationId                 Int
  name                       String                          @db.VarChar(255)
  dataType                   enum__eventOrderFields_dataType
  isReadOnly                 Boolean                         @default(false)
  sort                       Int
  createdAt                  DateTime                        @default(now()) @db.Timestamptz(6)
  updatedAt                  DateTime                        @default(now()) @db.Timestamptz(6)
  i18n                       Int?
  eventOrderData             EventOrderData[]
  eventOrderFieldTranslation EventOrderFieldTranslation[]

  @@index([relationId], map: "event_order_fields_relation_id")
  @@map("_eventOrderFields")
  @@schema("event")
}

model EventOrderTicketData {
  id                              Int                               @id @default(autoincrement())
  fieldId                         Int
  localeId                        Int?
  instanceId                      Int
  value                           String?                           @db.VarChar(1024)
  createdAt                       DateTime                          @default(now()) @db.Timestamptz(6)
  updatedAt                       DateTime                          @updatedAt() @db.Timestamptz(6)
  field                           EventOrderTicketField             @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  eventOrderTickets               EventOrderTicket                  @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  eventOrderTicketDataTranslation EventOrderTicketDataTranslation[]

  @@index([value], map: "event_order_ticket_data_value")
  @@map("_eventOrderTicketData")
  @@schema("event")
}

model EventOrderTicketDataTranslation {
  id                   Int                  @id @default(autoincrement())
  localeId             Int
  dataId               Int
  value                String               @db.VarChar(255)
  createdAt            DateTime             @db.Timestamptz(6)
  updatedAt            DateTime             @db.Timestamptz(6)
  eventOrderTicketData EventOrderTicketData @relation(fields: [dataId], references: [id], onDelete: NoAction)

  @@index([dataId, localeId], map: "event_order_ticket_data_translation_data_id_locale_id")
  @@map("_eventOrderTicketDataTranslation")
  @@schema("event")
}

model EventOrderTicketFieldTranslation {
  id                     Int                   @id @default(autoincrement())
  localeId               Int
  fieldId                Int
  value                  String                @db.VarChar(255)
  createdAt              DateTime              @db.Timestamptz(6)
  updatedAt              DateTime              @db.Timestamptz(6)
  eventOrderTicketFields EventOrderTicketField @relation(fields: [fieldId], references: [id], onDelete: Cascade)

  @@index([fieldId, localeId], map: "event_order_ticket_field_translation_field_id_locale_id")
  @@map("_eventOrderTicketFieldTranslation")
  @@schema("event")
}

model EventOrderTicketField {
  id                               Int                                   @id @default(autoincrement())
  clientId                         Int
  relationId                       Int
  name                             String                                @db.VarChar(255)
  dataType                         enum__eventOrderTicketFields_dataType
  isReadOnly                       Boolean                               @default(false)
  sort                             Int
  createdAt                        DateTime                              @default(now()) @db.Timestamptz(6)
  updatedAt                        DateTime                              @updatedAt() @db.Timestamptz(6)
  i18n                             Int?
  eventOrderTicketData             EventOrderTicketData[]
  eventOrderTicketFieldTranslation EventOrderTicketFieldTranslation[]

  @@index([relationId], map: "event_order_ticket_fields_relation_id")
  @@map("_eventOrderTicketFields")
  @@schema("event")
}

model EventAccess {
  id                  Int      @id @default(autoincrement())
  eventId             Int      @unique(map: "event_access_event_id")
  isVisibleToPublic   Boolean
  userGroupToSector   Json?    @db.Json
  createdAt           DateTime @db.Timestamptz(6)
  updatedAt           DateTime @db.Timestamptz(6)
  sectorUserSeatLimit Json?    @db.Json
  events              Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("eventAccess")
  @@schema("event")
}

model EventOrderTicket {
  id           Int                    @id @default(autoincrement())
  eventOrderId Int
  eventId      Int
  barcode      String?                @db.VarChar(255)
  price        Float
  quantity     Int
  discountId   Int?
  createdAt    DateTime               @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime               @updatedAt() @db.Timestamptz(6)
  data         EventOrderTicketData[]
  eventOrder   EventOrder             @relation(fields: [eventOrderId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "eventordertickets_fk")

  @@map("eventOrderTickets")
  @@schema("event")
}

model EventOrder {
  id               Int                           @id @default(autoincrement())
  state            enum_eventOrders_state
  paymentState     enum_eventOrders_paymentState
  discountId       Int?
  userId           Int
  code             String                        @db.VarChar(255)
  total            Float
  paidAmount       Float
  reservedTill     DateTime                      @db.Timestamptz(6)
  isFiscal         Boolean?
  meta             Json?                         @db.Json
  createdAt        DateTime                      @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime                      @default(now()) @db.Timestamptz(6)
  clientId         Int
  currencyId       Int
  eventId          Int?
  event            Event?                        @relation(fields: [eventId], references: [id])
  paymentStartedAt DateTime?                     @db.Timestamptz(6)
  deletedAt        DateTime?                     @db.Timestamptz(6)
  data             EventOrderData[]
  tickets          EventOrderTicket[]

  @@unique([code, eventId], map: "event_order_code_eventId")
  @@map("eventOrders")
  @@schema("event")
}

model EventPlace {
  id           Int           @id @default(autoincrement())
  clientId     Int
  name         String        @db.VarChar(255)
  address      String?       @db.VarChar(255)
  createdAt    DateTime      @db.Timestamptz(6)
  updatedAt    DateTime      @db.Timestamptz(6)
  preview      String?       @db.VarChar
  localeIdx    Int[]
  placeSectors PlaceSector[]
  Event        Event[]

  @@map("eventPlaces")
  @@schema("event")
}

model EventType {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(255)
  createdAt   DateTime @db.Timestamptz(6)
  updatedAt   DateTime @db.Timestamptz(6)
  description String?  @db.VarChar
  image       String?  @db.VarChar
  templates   Json?    @db.Json
  clientId    Int      @default(0) @db.SmallInt
  Event       Event[]

  @@map("eventTypes")
  @@schema("event")
}

model EventWhitelist {
  id         Int       @id @default(autoincrement())
  eventId    Int
  userId     Int
  sector     String?   @db.VarChar(255)
  row        String?   @db.VarChar(255)
  seat       String?   @db.VarChar(255)
  expiryDate DateTime? @db.Timestamptz(6)
  createdAt  DateTime  @db.Timestamptz(6)
  updatedAt  DateTime  @db.Timestamptz(6)

  @@index([eventId, userId], map: "event_whitelists_event_id_user_id")
  @@map("eventWhitelists")
  @@schema("event")
}

model Event {
  id                Int               @id @default(autoincrement())
  clientId          Int
  state             enum_events_state @default(INACTIVE)
  title             String            @db.VarChar(255)
  description       String?           @db.VarChar(255)
  saleStartDate     DateTime?         @db.Timestamptz(6)
  saleFinishDate    DateTime?         @db.Timestamptz(6)
  startDate         DateTime?         @db.Timestamptz(6)
  finishDate        DateTime?         @db.Timestamptz(6)
  createdAt         DateTime          @db.Timestamptz(6)
  updatedAt         DateTime          @db.Timestamptz(6)
  saleLimit         Int?
  tournamentMatchId Int?
  tournamentMatch   TournamentMatch?  @relation(fields: [tournamentMatchId], references: [id])
  availableSlots    Int?
  templates         Json?             @db.Json
  eventTypeId       Int
  eventType         EventType         @relation(fields: [eventTypeId], references: [id])
  eventPlaceId      Int
  eventPlace        EventPlace        @relation(fields: [eventPlaceId], references: [id])
  image             String?           @db.VarChar
  agreement         String?
  whitelist         Boolean           @default(false)
  isShowPublic      Boolean?          @default(true)
  linkedEventId     Int?
  deletedAt         DateTime?         @db.Timestamptz(6)
  isFanIdRequired   Boolean           @default(false)
  data              EventData[]
  access            EventAccess?
  orders            EventOrder[]

  @@index([clientId, state], map: "events_client_id_state")
  @@map("events")
  @@schema("event")
}

model PlaceSector {
  id                  Int        @id @default(autoincrement())
  eventPlaceId        Int
  name                String     @db.VarChar(255)
  isSectorSaleEnabled Boolean
  userSeatLimit       Int?
  createdAt           DateTime   @db.Timestamptz(6)
  updatedAt           DateTime   @db.Timestamptz(6)
  seatsCount          Int?
  deletedAt           DateTime?  @db.Timestamptz(6)
  eventPlaces         EventPlace @relation(fields: [eventPlaceId], references: [id], onDelete: Cascade)

  @@unique([eventPlaceId, name], map: "place_sectors_event_place_id_name")
  @@map("placeSectors")
  @@schema("event")
}

model Reserve {
  id         Int      @id @default(autoincrement())
  clientId   Int
  uuid       String   @unique(map: "reserves_uuid") @db.Uuid
  eventId    Int
  userId     Int
  seats      Int[]
  expiryDate DateTime @db.Timestamptz(6)
  meta       Json?    @db.Json
  createdAt  DateTime @db.Timestamptz(6)
  updatedAt  DateTime @db.Timestamptz(6)

  @@map("reserves")
  @@schema("event")
}

model EventSettings {
  id        Int      @id @default(autoincrement())
  clientId  Int?
  pdf       Json?    @db.Json
  applePass Json?    @db.Json
  email     Json?    @db.Json
  createdAt DateTime @db.Timestamptz(6)
  updatedAt DateTime @db.Timestamptz(6)

  @@schema("event")
}

//
// loyalty.prisma
//

model applications {
  id        Int                             @id @default(autoincrement())
  clientId  Int
  partnerId Int
  userId    Int
  state     loyalty_enum_applications_state @default(NEW)
  meta      Json?                           @db.Json
  createdAt DateTime                        @default(now()) @db.Timestamptz(6)
  updatedAt DateTime                        @updatedAt() @db.Timestamptz(6)
  deletedAt DateTime?                       @db.Timestamptz(6)

  @@index([clientId, state], map: "applications_client_id_state")
  @@schema("loyalty")
}

model partners {
  id          Int                 @id @default(autoincrement())
  clientId    Int
  state       enum_partners_state @default(INACTIVE)
  name        String              @db.VarChar(255)
  description String?             @db.VarChar(255)
  logo        String?             @db.VarChar(255)
  website     String?             @db.VarChar(255)
  shopId      Int?
  createdAt   DateTime            @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime            @updatedAt() @db.Timestamptz(6)
  deletedAt   DateTime?           @db.Timestamptz(6)
  providerId  Int?

  @@index([clientId, state], map: "partners_client_id_state")
  @@schema("loyalty")
}

model PromoCode {
  id         Int       @id @default(autoincrement())
  promoId    Int
  promo      Promo     @relation(fields: [promoId], references: [id], onDelete: NoAction)
  userId     Int?
  code       String    @db.VarChar(255)
  amount     Float?
  amountUsed Float?
  currencyId Int?
  expiredAt  DateTime? @db.Timestamptz(6)
  appliedAt  DateTime? @db.Timestamptz(6)
  createdAt  DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt  DateTime  @updatedAt() @db.Timestamptz(6)
  state      String    @db.VarChar

  @@unique([userId, promoId], map: "promoCodes_unique")
  @@map("promoCodes")
  @@schema("loyalty")
}

model Promo {
  id                  Int                  @id @default(autoincrement())
  clientId            Int
  name                String               @db.VarChar(255)
  description         String               @default("") @db.VarChar(255)
  imageUri            String?              @db.VarChar(255)
  state               enum_promos_state    @default(DRAFT)
  amount              Float?
  currencyId          Int?
  code                String?              @db.VarChar(255)
  codeType            enum_promos_codeType @default(SINGLE)
  codesCount          Int                  @default(0)
  startDate           DateTime             @db.Timestamptz(6)
  finishDate          DateTime             @db.Timestamptz(6)
  promoCodeStartDate  DateTime?            @db.Timestamptz(6)
  promoCodeFinishDate DateTime?            @db.Timestamptz(6)
  discountMaxAmount   Float?
  discountPercent     Float?
  createdAt           DateTime             @default(now()) @db.Timestamptz(6)
  updatedAt           DateTime             @updatedAt() @db.Timestamptz(6)
  deletedAt           DateTime?            @db.Timestamptz(6)
  eventId             Int?
  promoCodes          PromoCode[]

  @@map("promos")
  @@schema("loyalty")
}

//
// payment.prisma
//

model Account {
  id           Int                 @id @default(autoincrement())
  state        enum_accounts_state @default(INACTIVE)
  userId       Int
  currencyId   Int
  balance      Float?
  spent        Float?
  providerId   Int?
  providerCode String?             @db.VarChar(255)
  createdAt    DateTime            @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime            @updatedAt @db.Timestamptz(6)
  currency     Currency            @relation(fields: [currencyId], references: [id], onDelete: NoAction)
  transactions Transaction[]
  User         User                @relation(fields: [userId], references: [id])

  @@index([userId, state, currencyId], map: "accounts_user_id_state_currency_id")
  @@map("accounts")
  @@schema("payment")
}

model bankCards {
  id             Int                  @id @default(autoincrement())
  state          enum_bankCards_state @default(INACTIVE)
  userId         Int
  number         String               @db.VarChar(255)
  issuedBy       String?              @db.VarChar(255)
  expiredAt      String?              @db.VarChar(255)
  cardHolderName String?              @db.VarChar(255)
  token          String               @db.VarChar(255)
  createdAt      DateTime             @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime             @updatedAt @db.Timestamptz(6)
  transactionId  Int?
  transactions   Transaction?         @relation(fields: [transactionId], references: [id])

  @@index([userId, state], map: "bank_cards_user_id_state")
  @@schema("payment")
}

model channels {
  id          Int                 @id @default(autoincrement())
  clientId    Int
  state       enum_channels_state @default(INACTIVE)
  name        String              @db.VarChar(255)
  description String?             @db.VarChar(255)
  createdAt   DateTime            @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime            @updatedAt @db.Timestamptz(6)

  @@schema("payment")
}

model Currency {
  id                 Int                  @id @default(autoincrement())
  clientId           Int
  iso3               String               @db.VarChar(3)
  name               String               @db.VarChar(255)
  sign               String               @db.VarChar(255)
  isDefault          Boolean
  isVirtual          Boolean
  createdAt          DateTime             @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime             @updatedAt @db.Timestamptz(6)
  accounts           Account[]
  inAppTransactions  inAppTransactions[]
  transactions       Transaction[]
  CatalogueItemPrice CatalogueItemPrice[]

  @@map("currencies")
  @@schema("payment")
}

model Gateway {
  id          Int                 @id @default(autoincrement())
  state       enum_gateways_state @default(INACTIVE)
  clientId    Int?
  name        String              @db.VarChar(255)
  description String?             @db.VarChar(255)
  createdAt   DateTime            @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime            @updatedAt @db.Timestamptz(6)
  providers   Provider[]

  @@map("gateways")
  @@schema("payment")
}

model inAppPurchases {
  id         Int                       @id @default(autoincrement())
  clientId   Int
  productId  String                    @db.VarChar(255)
  store      enum_inAppPurchases_store
  title      String                    @db.VarChar(255)
  currencyId Int?
  amount     Float?
  createdAt  DateTime                  @default(now()) @db.Timestamptz(6)
  updatedAt  DateTime                  @updatedAt @db.Timestamptz(6)

  @@schema("payment")
}

model inAppSettings {
  id        Int                      @id @default(autoincrement())
  clientId  Int
  store     enum_inAppSettings_store
  settings  Json                     @db.Json
  createdAt DateTime                 @default(now()) @db.Timestamptz(6)
  updatedAt DateTime                 @updatedAt @db.Timestamptz(6)

  @@schema("payment")
}

model inAppTransactions {
  id                   Int                          @id @default(autoincrement())
  state                enum_inAppTransactions_state
  side                 enum_inAppTransactions_side
  userId               Int
  currencyId           Int?
  paymentTransactionId String?                      @db.VarChar(255)
  store                enum_inAppTransactions_store
  amount               Float?
  comment              String?                      @db.VarChar(255)
  meta                 Json?                        @db.Json
  response             Json?                        @db.Json
  createdAt            DateTime                     @default(now()) @db.Timestamptz(6)
  updatedAt            DateTime                     @updatedAt @db.Timestamptz(6)
  currencies           Currency?                    @relation(fields: [currencyId], references: [id])

  @@index([userId, state, currencyId, side], map: "in_app_transactions_user_id_state_currency_id_side")
  @@schema("payment")
}

model Provider {
  id           Int                  @id @default(autoincrement())
  gatewayId    Int
  clientId     Int
  state        enum_providers_state @default(INACTIVE)
  name         String               @db.VarChar(255)
  settings     Json?                @db.Json
  createdAt    DateTime             @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime             @updatedAt @db.Timestamptz(6)
  gateway      Gateway              @relation(fields: [gatewayId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@map("providers")
  @@schema("payment")
}

model TransactionLog {
  id            Int                            @id @default(autoincrement())
  transactionId Int
  systemUserId  Int
  operation     enum_transactionLogs_operation
  isSuccess     Boolean
  amount        Float
  error         Json?                          @db.Json
  response      Json?                          @db.Json
  meta          Json?                          @db.Json
  createdAt     DateTime                       @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime                       @updatedAt @db.Timestamptz(6)
  paymentCheck  Json?                          @db.Json
  transactions  Transaction                    @relation(fields: [transactionId], references: [id], onDelete: Cascade)

  @@index([transactionId, systemUserId, operation, isSuccess], map: "transaction_log_idx")
  @@map("transactionLogs")
  @@schema("payment")
}

model Transaction {
  id                   Int                          @id @default(autoincrement())
  state                enum_transactions_state
  side                 enum_transactions_side
  userId               Int
  accountId            Int
  currencyId           Int
  providerId           Int?
  amount               Float
  bankCardId           Int?
  orderId              String?                      @db.VarChar(255)
  orderType            enum_transactions_orderType?
  createdAt            DateTime                     @default(now()) @db.Timestamptz(6)
  updatedAt            DateTime                     @updatedAt() @db.Timestamptz(6)
  meta                 Json?                        @db.Json
  comment              String?                      @db.VarChar
  paymentTransactionId String?                      @db.VarChar
  response             Json?                        @db.Json
  channelId            Int?
  bankCards            bankCards[]
  transactionLogs      TransactionLog[]
  accounts             Account                      @relation(fields: [accountId], references: [id], onDelete: Cascade)
  currency             Currency                     @relation(fields: [currencyId], references: [id], onDelete: Cascade)
  provider             Provider?                    @relation(fields: [providerId], references: [id], onDelete: Cascade)

  @@unique([paymentTransactionId, providerId], map: "transactions_paymentTransactionId_providerId")
  @@index([userId, state, currencyId, side], map: "transactions_user_id_state_currency_id_side")
  @@map("transactions")
  @@schema("payment")
}

//
// quiz.prisma
//

model AttemptAnswer {
  id               Int            @id @default(autoincrement())
  attemptId        Int
  userId           Int
  questionId       Int
  questionAnswerId Int
  isCorrect        Boolean?
  createdAt        DateTime       @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime       @updatedAt() @db.Timestamptz(6)
  deletedAt        DateTime?      @db.Timestamptz(6)
  attempts         Attempt        @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  questionAnswers  QuestionAnswer @relation(fields: [questionAnswerId], references: [id], onDelete: NoAction)
  questions        Question       @relation(fields: [questionId], references: [id], onDelete: NoAction)

  @@unique([attemptId, userId, questionId], map: "attempt_answers_attempt_id_user_id_question_id")
  @@map("attemptAnswers")
  @@schema("quiz")
}

model Attempt {
  id             Int             @id @default(autoincrement())
  quizId         Int
  userId         Int
  startedAt      DateTime        @db.Timestamptz(6)
  finishedAt     DateTime?       @db.Timestamptz(6)
  createdAt      DateTime        @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime        @updatedAt() @db.Timestamptz(6)
  deletedAt      DateTime?       @db.Timestamptz(6)
  attemptAnswers AttemptAnswer[]
  quizes         Quiz            @relation(fields: [quizId], references: [id], onDelete: NoAction)

  @@map("attempts")
  @@schema("quiz")
}

model QuestionAnswer {
  id             Int             @id @default(autoincrement())
  questionId     Int
  text           String?         @db.VarChar(255)
  image          String?         @db.VarChar(255)
  isCorrect      Boolean?
  sort           Int             @default(0)
  createdAt      DateTime        @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime        @updatedAt() @db.Timestamptz(6)
  deletedAt      DateTime?       @db.Timestamptz(6)
  attemptAnswers AttemptAnswer[]
  questions      Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@map("questionAnswers")
  @@schema("quiz")
}

model Question {
  id             Int              @id @default(autoincrement())
  quizId         Int
  title          String           @db.VarChar(255)
  text           String?          @db.VarChar(255)
  images         Json?            @db.Json
  isMultiple     Boolean
  sort           Int              @default(0)
  createdAt      DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime         @updatedAt() @db.Timestamptz(6)
  deletedAt      DateTime?        @db.Timestamptz(6)
  attemptAnswers AttemptAnswer[]
  answers        QuestionAnswer[]
  quizes         Quiz             @relation(fields: [quizId], references: [id], onDelete: NoAction)

  @@map("questions")
  @@schema("quiz")
}

model Quiz {
  id            Int               @id @default(autoincrement())
  clientId      Int
  autoCreated   String?           @unique(map: "quizes_auto_created") @db.VarChar(255)
  title         String            @db.VarChar(255)
  coverImageUrl String?           @db.VarChar(255)
  startedAt     DateTime?         @db.Timestamptz(6)
  finishedAt    DateTime?         @db.Timestamptz(6)
  type          enum_quizes_type
  state         enum_quizes_state @default(INACTIVE)
  createdAt     DateTime          @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime          @updatedAt() @db.Timestamptz(6)
  deletedAt     DateTime?         @db.Timestamptz(6)
  maxAttempts   Int               @default(1)
  attempts      Attempt[]
  questions     Question[]

  @@map("quizes")
  @@schema("quiz")
}

//
// social.prisma
//

model SocialNetwork {
  id                 Int                       @id @default(autoincrement())
  name               String                    @db.VarChar(255)
  state              enum_socialNetworks_state @default(INACTIVE)
  description        String?                   @db.VarChar(255)
  logoUrl            String?                   @db.VarChar(255)
  createdAt          DateTime                  @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime                  @updatedAt @db.Timestamptz(6)
  SocialNewsSettings SocialNewsSettings[]

  @@map("socialNetworks")
  @@schema("social")
}

model SocialNewsSettings {
  id                Int                                @id @default(autoincrement())
  clientId          Int
  socialNetworkId   Int
  url               String                             @db.VarChar(255)
  entityType        enum_socialNewsSettings_entityType
  entityId          Int
  articleCategoryId Int
  localeId          Int
  settings          Json?                              @db.Json
  username          String                             @db.VarChar(255)
  displayName       String                             @db.VarChar(255)
  state             enum_socialNewsSettings_state      @default(INACTIVE)
  error             Json?                              @db.Json
  createdAt         DateTime                           @default(now()) @db.Timestamptz(6)
  updatedAt         DateTime                           @updatedAt @db.Timestamptz(6)
  socialNetwork     SocialNetwork                      @relation(fields: [socialNetworkId], references: [id])

  @@map("socialNewsSettings")
  @@schema("social")
}

//
// system.prisma
//

model Country {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  iso2      String   @db.VarChar(255)
  iso3      String   @db.VarChar(255)
  phoneCode String   @db.VarChar(255)
  icon      String?
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)

  @@map("countries")
  @@schema("system")
}

model SystemSettings {
  id       Int   @id @default(autoincrement())
  clientId Int   @unique
  user     Json?

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)

  @@map("settings")
  @@schema("system")
}

model AsyncTask {
  id           Int                    @id @default(autoincrement())
  clientId     Int                    @unique
  entity       enum_asyncTasks_entity
  entityId     String
  operation    String
  state        enum_asyncTasks_state
  progress     Json
  systemUserId Int
  errors       Json?

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)

  @@map("asyncTasks")
  @@schema("system")
}

//
// tournament.prisma
//

model matchData {
  id                   Int                    @id @default(autoincrement())
  fieldId              Int
  localeId             Int?
  instanceId           Int
  value                String?                @db.VarChar(1024)
  createdAt            DateTime               @default(now()) @db.Timestamptz(6)
  updatedAt            DateTime               @updatedAt() @db.Timestamptz(6)
  matchFields          matchFields            @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  matches              TournamentMatch        @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  matchDataTranslation matchDataTranslation[]

  @@index([value], map: "match_data_value")
  @@map("_matchData")
  @@schema("tournament")
}

model matchDataTranslation {
  id        Int       @id @default(autoincrement())
  localeId  Int
  dataId    Int
  value     String    @db.VarChar(255)
  createdAt DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt DateTime  @updatedAt() @db.Timestamptz(6)
  matchData matchData @relation(fields: [dataId], references: [id], onDelete: NoAction)

  @@index([dataId, localeId], map: "match_data_translation_data_id_locale_id")
  @@map("_matchDataTranslation")
  @@schema("tournament")
}

model matchFieldTranslation {
  id          Int         @id @default(autoincrement())
  localeId    Int
  fieldId     Int
  value       String      @db.VarChar(255)
  createdAt   DateTime    @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime    @updatedAt() @db.Timestamptz(6)
  matchFields matchFields @relation(fields: [fieldId], references: [id], onDelete: Cascade)

  @@index([fieldId, localeId], map: "match_field_translation_field_id_locale_id")
  @@map("_matchFieldTranslation")
  @@schema("tournament")
}

model matchFields {
  id                    Int                        @id @default(autoincrement())
  clientId              Int
  relationId            Int
  name                  String                     @db.VarChar(255)
  dataType              enum__matchFields_dataType
  isReadOnly            Boolean                    @default(false)
  sort                  Int
  createdAt             DateTime                   @default(now()) @db.Timestamptz(6)
  updatedAt             DateTime                   @updatedAt() @db.Timestamptz(6)
  i18n                  Int?
  matchData             matchData[]
  matchFieldTranslation matchFieldTranslation[]

  @@index([relationId], map: "match_fields_relation_id")
  @@map("_matchFields")
  @@schema("tournament")
}

model teamData {
  id                  Int                   @id @default(autoincrement())
  fieldId             Int
  localeId            Int?
  instanceId          Int
  value               String?               @db.VarChar(1024)
  createdAt           DateTime              @default(now()) @db.Timestamptz(6)
  updatedAt           DateTime              @updatedAt() @db.Timestamptz(6)
  teamFields          teamFields            @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  teams               Team                  @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  teamDataTranslation teamDataTranslation[]

  @@index([value], map: "team_data_value")
  @@map("_teamData")
  @@schema("tournament")
}

model teamDataTranslation {
  id        Int      @id @default(autoincrement())
  localeId  Int
  dataId    Int
  value     String   @db.VarChar(255)
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt() @db.Timestamptz(6)
  teamData  teamData @relation(fields: [dataId], references: [id], onDelete: NoAction)

  @@index([dataId, localeId], map: "team_data_translation_data_id_locale_id")
  @@map("_teamDataTranslation")
  @@schema("tournament")
}

model teamFieldTranslation {
  id         Int        @id @default(autoincrement())
  localeId   Int
  fieldId    Int
  value      String     @db.VarChar(255)
  createdAt  DateTime   @default(now()) @db.Timestamptz(6)
  updatedAt  DateTime   @updatedAt() @db.Timestamptz(6)
  teamFields teamFields @relation(fields: [fieldId], references: [id], onDelete: Cascade)

  @@index([fieldId, localeId], map: "team_field_translation_field_id_locale_id")
  @@map("_teamFieldTranslation")
  @@schema("tournament")
}

model teamFields {
  id                   Int                       @id @default(autoincrement())
  clientId             Int
  relationId           Int
  name                 String                    @db.VarChar(255)
  dataType             enum__teamFields_dataType
  isReadOnly           Boolean                   @default(false)
  sort                 Int
  createdAt            DateTime                  @default(now()) @db.Timestamptz(6)
  updatedAt            DateTime                  @updatedAt() @db.Timestamptz(6)
  i18n                 Int?
  teamData             teamData[]
  teamFieldTranslation teamFieldTranslation[]

  @@index([relationId], map: "team_fields_relation_id")
  @@map("_teamFields")
  @@schema("tournament")
}

model TeamMemberData {
  id                        Int                         @id @default(autoincrement())
  fieldId                   Int
  localeId                  Int?
  instanceId                Int
  value                     String?                     @db.VarChar(1024)
  createdAt                 DateTime                    @default(now()) @db.Timestamptz(6)
  updatedAt                 DateTime                    @updatedAt() @db.Timestamptz(6)
  field                     teamMemberFields            @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  teamMembers               TeamMember                  @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  teamMemberDataTranslation teamMemberDataTranslation[]

  @@index([value], map: "team_member_data_value")
  @@map("_teamMemberData")
  @@schema("tournament")
}

model teamMemberDataTranslation {
  id             Int            @id @default(autoincrement())
  localeId       Int
  dataId         Int
  value          String         @db.VarChar(255)
  createdAt      DateTime       @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime       @updatedAt() @db.Timestamptz(6)
  teamMemberData TeamMemberData @relation(fields: [dataId], references: [id], onDelete: NoAction)

  @@index([dataId, localeId], map: "team_member_data_translation_data_id_locale_id")
  @@map("_teamMemberDataTranslation")
  @@schema("tournament")
}

model teamMemberFieldTranslation {
  id               Int              @id @default(autoincrement())
  localeId         Int
  fieldId          Int
  value            String           @db.VarChar(255)
  createdAt        DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime         @updatedAt() @db.Timestamptz(6)
  teamMemberFields teamMemberFields @relation(fields: [fieldId], references: [id], onDelete: Cascade)

  @@index([fieldId, localeId], map: "team_member_field_translation_field_id_locale_id")
  @@map("_teamMemberFieldTranslation")
  @@schema("tournament")
}

model teamMemberFields {
  id                         Int                             @id @default(autoincrement())
  clientId                   Int
  relationId                 Int
  name                       String                          @db.VarChar(255)
  dataType                   enum__teamMemberFields_dataType
  isReadOnly                 Boolean                         @default(false)
  sort                       Int
  createdAt                  DateTime                        @default(now()) @db.Timestamptz(6)
  updatedAt                  DateTime                        @updatedAt() @db.Timestamptz(6)
  i18n                       Int?
  teamMemberData             TeamMemberData[]
  teamMemberFieldTranslation teamMemberFieldTranslation[]

  @@index([relationId], map: "team_member_fields_relation_id")
  @@map("_teamMemberFields")
  @@schema("tournament")
}

model tournamentData {
  id                        Int                         @id @default(autoincrement())
  fieldId                   Int
  localeId                  Int?
  instanceId                Int
  value                     String?                     @db.VarChar(1024)
  createdAt                 DateTime                    @default(now()) @db.Timestamptz(6)
  updatedAt                 DateTime                    @updatedAt() @db.Timestamptz(6)
  tournamentFields          tournamentFields            @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  tournaments               Tournament                  @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  tournamentDataTranslation tournamentDataTranslation[]

  @@index([value], map: "tournament_data_value")
  @@map("_tournamentData")
  @@schema("tournament")
}

model tournamentDataTranslation {
  id             Int            @id @default(autoincrement())
  localeId       Int
  dataId         Int
  value          String         @db.VarChar(255)
  createdAt      DateTime       @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime       @updatedAt() @db.Timestamptz(6)
  tournamentData tournamentData @relation(fields: [dataId], references: [id], onDelete: NoAction)

  @@index([dataId, localeId], map: "tournament_data_translation_data_id_locale_id")
  @@map("_tournamentDataTranslation")
  @@schema("tournament")
}

model tournamentFieldTranslation {
  id               Int              @id @default(autoincrement())
  localeId         Int
  fieldId          Int
  value            String           @db.VarChar(255)
  createdAt        DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime         @updatedAt() @db.Timestamptz(6)
  tournamentFields tournamentFields @relation(fields: [fieldId], references: [id], onDelete: Cascade)

  @@index([fieldId, localeId], map: "tournament_field_translation_field_id_locale_id")
  @@map("_tournamentFieldTranslation")
  @@schema("tournament")
}

model tournamentFields {
  id                         Int                             @id @default(autoincrement())
  clientId                   Int
  relationId                 Int
  name                       String                          @db.VarChar(255)
  dataType                   enum__tournamentFields_dataType
  isReadOnly                 Boolean                         @default(false)
  i18n                       Int?
  sort                       Int
  createdAt                  DateTime                        @default(now()) @db.Timestamptz(6)
  updatedAt                  DateTime                        @updatedAt() @db.Timestamptz(6)
  tournamentData             tournamentData[]
  tournamentFieldTranslation tournamentFieldTranslation[]

  @@index([relationId], map: "tournament_fields_relation_id")
  @@map("_tournamentFields")
  @@schema("tournament")
}

model disputeResponses {
  id          Int                         @id @default(autoincrement())
  disputeId   Int
  state       enum_disputeResponses_state @default(WAITING)
  userId      Int
  amount      Int
  comment     String
  respondedAt DateTime                    @db.Timestamptz(6)
  createdAt   DateTime                    @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime                    @updatedAt() @db.Timestamptz(6)
  deletedAt   DateTime?                   @db.Timestamptz(6)
  disputes    disputes                    @relation(fields: [disputeId], references: [id], onDelete: NoAction)

  @@schema("tournament")
}

model disputes {
  id               Int                        @id @default(autoincrement())
  state            enum_disputes_state        @default(ACTIVE)
  result           enum_disputes_result       @default(WAITING)
  confirmation     enum_disputes_confirmation @default(WAITING)
  userId           Int
  matchId          Int
  amount           Int
  winAmount        Int                        @default(0)
  text             String
  createdAt        DateTime                   @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime                   @updatedAt() @db.Timestamptz(6)
  deletedAt        DateTime?                  @db.Timestamptz(6)
  disputeResponses disputeResponses[]
  matches          TournamentMatch            @relation(fields: [matchId], references: [id], onDelete: NoAction)

  @@schema("tournament")
}

model disqualifications {
  id                    Int                          @id @default(autoincrement())
  playerId              Int
  reason                String                       @db.VarChar(255)
  tournamentId          Int
  seasonId              Int
  resolutionDate        DateTime                     @db.Timestamptz(6)
  disqualificationValue Int
  leftMatches           Int
  state                 enum_disqualifications_state
  meta                  Json?                        @db.Json
  createdAt             DateTime                     @default(now()) @db.Timestamptz(6)
  updatedAt             DateTime                     @updatedAt() @db.Timestamptz(6)
  deletedAt             DateTime?                    @db.Timestamptz(6)
  teamMembers           TeamMember                   @relation(fields: [playerId], references: [id], onDelete: Cascade)
  seasons               Season                       @relation(fields: [seasonId], references: [id], onDelete: NoAction)
  tournaments           Tournament                   @relation(fields: [tournamentId], references: [id], onDelete: NoAction)

  @@schema("tournament")
}

model TournamentGroup {
  id        Int               @id @default(autoincrement())
  name      String            @db.VarChar(255)
  key       String?           @db.VarChar(255)
  seasonId  Int
  createdAt DateTime          @default(now()) @db.Timestamptz(6)
  updatedAt DateTime          @updatedAt() @db.Timestamptz(6)
  stage     enum_groups_stage @default(UNKNOWN)
  sort      Int               @default(0) @db.SmallInt
  seasons   Season            @relation(fields: [seasonId], references: [id], onDelete: NoAction)
  teamStats SeasonTeamStat[]
  matches   TournamentMatch[]

  @@unique([name, seasonId])
  @@map("groups")
  @@schema("tournament")
}

model MatchEvent {
  id                 Int                    @id @default(autoincrement())
  matchId            Int
  datetime           DateTime               @db.Timestamptz(6)
  minute             Int
  event              enum_matchEvents_event
  teamMemberId       Int?
  teamId             Int?
  comment            String?
  isProtocol         Boolean
  label              String?
  meta               Json?                  @db.Json
  createdAt          DateTime               @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime               @updatedAt() @db.Timestamptz(6)
  deletedAt          DateTime?              @db.Timestamptz(6)
  linkedMatchEventId Int?
  additionalTime     Int?
  matches            TournamentMatch        @relation(fields: [matchId], references: [id], onDelete: Cascade)
  team               Team?                  @relation(fields: [teamId], references: [id], onDelete: Cascade)
  player             TeamMember?            @relation(fields: [teamMemberId], references: [id], onDelete: Cascade)

  @@index([matchId])
  @@map("matchEvents")
  @@schema("tournament")
}

model MatchLineUp {
  id            Int                             @id @default(autoincrement())
  matchId       Int
  teamId        Int?
  teamMemberId  Int?
  refereeId     Int?
  type          enum_matchLineUps_type?         @default(PLAYER)
  initialRole   enum_matchLineUps_initialRole?
  finalRole     enum_matchLineUps_finalRole?
  initialState  enum_matchLineUps_initialState?
  finalState    enum_matchLineUps_finalState?
  number        Int?
  isTeamCaptain Boolean?                        @default(false)
  meta          Json?                           @db.Json
  createdAt     DateTime                        @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime                        @updatedAt() @db.Timestamptz(6)
  deletedAt     DateTime?                       @db.Timestamptz(6)
  positionId    Int                             @default(1)
  matches       TournamentMatch                 @relation(fields: [matchId], references: [id], onDelete: Cascade)
  referees      referees?                       @relation(fields: [refereeId], references: [id], onDelete: NoAction)
  team          Team?                           @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamMember    TeamMember?                     @relation(fields: [teamMemberId], references: [id], onDelete: Cascade)

  @@unique([matchId, teamMemberId], map: "matchLineUps_matchId_teamMemberId")
  @@map("matchLineUps")
  @@schema("tournament")
}

model matchProtocols {
  id           Int                       @id @default(autoincrement())
  matchId      Int
  minute       Int?
  event        enum_matchProtocols_event
  teamMemberId Int
  teamId       Int
  meta         Json?                     @db.Json
  createdAt    DateTime                  @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime                  @updatedAt() @db.Timestamptz(6)
  matches      TournamentMatch           @relation(fields: [matchId], references: [id], onDelete: Cascade)
  teams        Team                      @relation(fields: [teamId], references: [id], onDelete: NoAction)
  teamMembers  TeamMember                @relation(fields: [teamMemberId], references: [id], onDelete: NoAction)

  @@index([matchId])
  @@schema("tournament")
}

model matchStat {
  id                              Int                  @id @default(autoincrement())
  matchId                         Int
  team1Id                         Int?
  team2Id                         Int?
  type                            enum_matchStats_type
  team1Value                      Int
  team2Value                      Int
  team1Comparative                Float                @default(0)
  team2Comparative                Float                @default(0)
  createdAt                       DateTime             @default(now()) @db.Timestamptz(6)
  updatedAt                       DateTime             @updatedAt() @db.Timestamptz(6)
  sort                            Int                  @default(0)
  matches                         TournamentMatch      @relation(fields: [matchId], references: [id], onDelete: NoAction)
  teams_matchStats_team1IdToteams Team?                @relation("matchStats_team1IdToteams", fields: [team1Id], references: [id], onDelete: NoAction)
  teams_matchStats_team2IdToteams Team?                @relation("matchStats_team2IdToteams", fields: [team2Id], references: [id], onDelete: NoAction)

  @@unique([matchId, type], map: "matchStats_matchId_type")
  @@map("matchStats")
  @@schema("tournament")
}

model TournamentMatch {
  id                   Int                @id @default(autoincrement())
  team1Id              Int
  team2Id              Int
  team1IdGoals         Int?
  team2IdGoals         Int?
  seasonId             Int
  tourId               Int?
  state                enum_matches_state
  meta                 Json?              @db.Json
  videoStreams         Json?              @db.Json
  stadiumName          String?            @db.VarChar(255)
  stadiumAddress       String?            @db.VarChar(255)
  startDate            DateTime           @db.Timestamptz(6)
  startTime            DateTime?          @db.Timestamptz(6)
  finishDate           DateTime           @db.Timestamptz(6)
  startedAt            DateTime?          @db.Timestamptz(6)
  finishedAt           DateTime?          @db.Timestamptz(6)
  createdAt            DateTime           @default(now()) @db.Timestamptz(6)
  updatedAt            DateTime           @updatedAt() @db.Timestamptz(6)
  deletedAt            DateTime?          @db.Timestamptz(6)
  result               String?            @db.VarChar
  team1IdShootoutGoals Int?
  team2IdShootoutGoals Int?
  stadium              String?            @db.VarChar(255)
  city                 String?            @db.VarChar(255)
  isOvertime           Boolean            @default(false)
  isPenaltyShootout    Boolean            @default(false)
  groupId              Int?
  title                String?            @db.VarChar(255)
  matchData            matchData[]
  disputes             disputes[]
  matchEvents          MatchEvent[]
  matchLineUps         MatchLineUp[]
  matchProtocols       matchProtocols[]
  matchStats           matchStat[]
  group                TournamentGroup?   @relation(fields: [groupId], references: [id], onDelete: NoAction)
  season               Season             @relation(fields: [seasonId], references: [id], onDelete: NoAction)
  team1                Team               @relation("team1", fields: [team1Id], references: [id], onDelete: Cascade)
  team2                Team               @relation("team2", fields: [team2Id], references: [id], onDelete: Cascade)
  tour                 Tour?              @relation(fields: [tourId], references: [id], onDelete: NoAction)
  events               Event[]

  @@index([team1Id], map: "matches_team1id_idx")
  @@index([team2Id], map: "matches_team2id_idx")
  @@index([tourId], map: "matches_tours_idx")
  @@index([team1Id, team2Id], map: "tournament_team_idx")
  @@map("matches")
  @@schema("tournament")
}

model playerStats {
  id                  Int        @id @default(autoincrement())
  playerId            Int
  seasonId            Int
  games               Int        @default(0)
  goals               Int        @default(0)
  penaltyKicks        Int        @default(0)
  passes              Int        @default(0)
  yellowCards         Int        @default(0)
  redCards            Int        @default(0)
  missedGoals         Int        @default(0)
  shutouts            Int        @default(0)
  bombardierValue     Float      @default(0)
  assistantValue      Float      @default(0)
  goalsAndPassesValue Float      @default(0)
  goalkeeperValue     Float      @default(0)
  warningValue        Float      @default(0)
  meta                Json?      @db.Json
  createdAt           DateTime   @default(now()) @db.Timestamptz(6)
  updatedAt           DateTime   @updatedAt() @db.Timestamptz(6)
  allGoals            Int?
  goalsAndPasses      Int?
  avgGoals            Int?
  avgPasses           Int?
  position            Int?
  teamMember          TeamMember @relation(fields: [playerId], references: [id], onDelete: Cascade)
  season              Season     @relation(fields: [seasonId], references: [id], onDelete: NoAction)

  @@unique([playerId, seasonId])
  @@schema("tournament")
}

model referees {
  id           Int           @id @default(autoincrement())
  firstName    String        @db.VarChar(255)
  lastName     String        @db.VarChar(255)
  middleName   String?       @db.VarChar(255)
  birthday     String        @db.VarChar(255)
  preview      String?       @db.VarChar(255)
  photo        String?       @db.VarChar(255)
  category     String?       @db.VarChar(255)
  meta         Json?         @db.Json
  createdAt    DateTime      @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime      @updatedAt() @db.Timestamptz(6)
  deletedAt    DateTime?     @db.Timestamptz(6)
  typeId       Int           @default(1)
  matchLineUps MatchLineUp[]

  @@schema("tournament")
}

model seasonApplicationFormToTeamMember {
  createdAt               DateTime               @default(now()) @db.Timestamptz(6)
  updatedAt               DateTime               @updatedAt() @db.Timestamptz(6)
  seasonApplicationFormId Int
  teamMemberId            Int
  seasonApplicationForms  seasonApplicationForms @relation(fields: [seasonApplicationFormId], references: [id], onDelete: Cascade)
  teamMembers             TeamMember             @relation(fields: [teamMemberId], references: [id], onDelete: Cascade)

  @@id([seasonApplicationFormId, teamMemberId])
  @@schema("tournament")
}

model seasonApplicationForms {
  id                                Int                                 @id @default(autoincrement())
  seasonId                          Int
  teamId                            Int
  meta                              Json?                               @db.Json
  createdAt                         DateTime                            @default(now()) @db.Timestamptz(6)
  updatedAt                         DateTime                            @updatedAt() @db.Timestamptz(6)
  deletedAt                         DateTime?                           @db.Timestamptz(6)
  seasonApplicationFormToTeamMember seasonApplicationFormToTeamMember[]
  teams                             Team                                @relation(fields: [teamId], references: [id], onDelete: NoAction)

  @@unique([seasonId, teamId])
  @@schema("tournament")
}

model SeasonTeamStat {
  id          Int              @id @default(autoincrement())
  seasonId    Int
  season      Season           @relation(fields: [seasonId], references: [id], onDelete: NoAction)
  position    Int              @default(0)
  teamId      Int
  points      Int              @default(0)
  games       Int              @default(0)
  win         Int              @default(0)
  draw        Int              @default(0)
  loss        Int              @default(0)
  goals       Int              @default(0)
  missedGoals Int              @default(0)
  yellowCards Int              @default(0)
  redCards    Int              @default(0)
  shutouts    Int              @default(0)
  sort        Float?           @default(0)
  meta        Json?            @db.Json
  createdAt   DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime         @updatedAt() @db.Timestamptz(6)
  groupId     Int?
  group       TournamentGroup? @relation(fields: [groupId], references: [id], onDelete: Cascade)
  team        Team             @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([seasonId, teamId, groupId], map: "seasonteamstats_seasonid_teamid_groupid_key")
  @@map("seasonTeamStats")
  @@schema("tournament")
}

model SeasonTeam {
  id        Int      @id @default(autoincrement())
  seasonId  Int
  teamId    Int
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt() @db.Timestamptz(6)
  seasons   Season   @relation(fields: [seasonId], references: [id], onDelete: NoAction)
  teams     Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([seasonId, teamId], map: "season_team_season_id_team_id_key")
  @@map("season_team")
  @@schema("tournament")
}

model SeasonTeamMember {
  id           Int                           @id @default(autoincrement())
  seasonId     Int
  teamId       Int
  teamMemberId Int
  state        enum_season_teamMember_state? @default(ACTIVE)
  createdAt    DateTime                      @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime                      @updatedAt() @db.Timestamptz(6)
  season       Season                        @relation(fields: [seasonId], references: [id], onDelete: NoAction)
  team         Team                          @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamMember   TeamMember                    @relation(fields: [teamMemberId], references: [id], onDelete: Cascade)

  @@unique([seasonId, teamId, teamMemberId, state], map: "season_teamMember_seasonId_teamId_teamMemberId_state")
  @@map("season_teamMember")
  @@schema("tournament")
}

model Season {
  id                Int                 @id @default(autoincrement())
  title             String?             @db.VarChar(255)
  description       String?             @db.VarChar(255)
  tournamentId      Int
  startDate         DateTime?           @db.Timestamptz(6)
  finishDate        DateTime?           @db.Timestamptz(6)
  regulation        String?
  state             enum_seasons_state
  sort              Int
  meta              Json?               @db.Json
  createdAt         DateTime            @default(now()) @db.Timestamptz(6)
  updatedAt         DateTime            @updatedAt() @db.Timestamptz(6)
  deletedAt         DateTime?           @db.Timestamptz(6)
  disqualifications disqualifications[]
  groups            TournamentGroup[]
  matches           TournamentMatch[]
  playerStats       playerStats[]
  seasonTeam        SeasonTeam[]
  season_teamMember SeasonTeamMember[]
  tournament        Tournament          @relation(fields: [tournamentId], references: [id], onDelete: NoAction)
  tours             Tour[]
  seasonTeamStats   SeasonTeamStat[]

  @@map("seasons")
  @@schema("tournament")
}

model TournamentSettings {
  id                     Int      @id @default(autoincrement())
  clientId               Int
  tournamentId           Int
  pushEventSubscriptions Json?    @db.Json
  pushEventTemplates     Json?    @db.Json
  transportId            Int?
  createdAt              DateTime @default(now()) @db.Timestamptz(6)
  updatedAt              DateTime @updatedAt() @db.Timestamptz(6)

  @@unique([clientId, tournamentId], map: "settings_client_id_tournament_id")
  @@map("settings")
  @@schema("tournament")
}

model stadiums {
  id          Int       @id @default(autoincrement())
  teamId      Int?
  name        String    @db.VarChar(255)
  description String?   @db.VarChar(255)
  photo       String?   @db.VarChar(255)
  address     String?   @db.VarChar(255)
  builtIn     DateTime? @db.Timestamptz(6)
  capacity    Int?
  createdAt   DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime  @updatedAt() @db.Timestamptz(6)
  lat         Float?
  lon         Float?
  teams       Team?     @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@schema("tournament")
}

model teamGroups {
  id        Int      @id @default(autoincrement())
  groupId   Int
  teamId    Int
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt() @db.Timestamptz(6)

  @@schema("tournament")
}

model teamHistories {
  id            Int       @id @default(autoincrement())
  teamId        Int
  field         String?   @db.VarChar(255)
  value         String?   @db.VarChar(255)
  translationId Int?
  meta          Json?     @db.Json
  createdAt     DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime  @updatedAt() @db.Timestamptz(6)
  deletedAt     DateTime? @db.Timestamptz(6)
  teams         Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@schema("tournament")
}

model teamMemberSocialAccounts {
  id                    Int                                         @id @default(autoincrement())
  state                 enum_teamMemberSocialAccounts_state         @default(ACTIVE)
  socialNetwork         enum_teamMemberSocialAccounts_socialNetwork
  socialNetworkId       String                                      @db.VarChar(255)
  socialNetworkUsername String?                                     @db.VarChar(255)
  teamMemberId          Int
  payload               String
  expiresAt             DateTime?                                   @db.Timestamptz(6)
  deletedAt             DateTime?                                   @db.Timestamptz(6)
  createdAt             DateTime                                    @default(now()) @db.Timestamptz(6)
  updatedAt             DateTime                                    @updatedAt() @db.Timestamptz(6)
  teamMembers           TeamMember                                  @relation(fields: [teamMemberId], references: [id], onDelete: Cascade)

  @@schema("tournament")
}

model TeamMember {
  id                                Int                                 @id @default(autoincrement())
  type                              enum_teamMembers_type
  teamId                            Int
  firstName                         String                              @db.VarChar(255)
  lastName                          String                              @db.VarChar(255)
  middleName                        String?                             @db.VarChar(255)
  birthday                          String                              @db.VarChar(255)
  weight                            Int?
  height                            Int?
  number                            Int?
  role                              enum_teamMembers_role?
  bio                               String?                             @db.VarChar(255)
  photo                             String?                             @db.VarChar(255)
  meta                              Json?                               @db.Json
  createdAt                         DateTime                            @default(now()) @db.Timestamptz(6)
  updatedAt                         DateTime                            @updatedAt() @db.Timestamptz(6)
  deletedAt                         DateTime?                           @db.Timestamptz(6)
  citizenship                       String?                             @db.VarChar
  positionId                        Int                                 @default(1)
  data                              TeamMemberData[]
  disqualifications                 disqualifications[]
  matchEvents                       MatchEvent[]
  matchLineUps                      MatchLineUp[]
  matchProtocols                    matchProtocols[]
  playerStats                       playerStats[]
  seasonApplicationFormToTeamMember seasonApplicationFormToTeamMember[]
  season_teamMember                 SeasonTeamMember[]
  teamMemberSocialAccounts          teamMemberSocialAccounts[]
  team                              Team                                @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@map("teamMembers")
  @@schema("tournament")
}

model Team {
  id                                   Int                      @id @default(autoincrement())
  clientId                             Int
  name                                 String                   @db.VarChar(255)
  logo                                 String?                  @db.VarChar(255)
  coverPhoto                           String?                  @db.VarChar(255)
  website                              String?                  @db.VarChar(255)
  description                          String?                  @db.VarChar(255)
  history                              String?                  @db.VarChar(255)
  foundingDate                         String?                  @db.VarChar(255)
  altLogo                              String?                  @db.VarChar(511)
  teamForm                             String[]                 @db.VarChar(255)
  meta                                 Json?                    @db.Json
  createdAt                            DateTime                 @default(now()) @db.Timestamptz(6)
  updatedAt                            DateTime                 @updatedAt() @db.Timestamptz(6)
  deletedAt                            DateTime?                @db.Timestamptz(6)
  stadium                              String?                  @db.VarChar(255)
  city                                 String?                  @db.VarChar(255)
  teamData                             teamData[]
  matchEvents                          MatchEvent[]
  matchLineUps                         MatchLineUp[]
  matchProtocols                       matchProtocols[]
  matchStats_matchStats_team1IdToteams matchStat[]              @relation("matchStats_team1IdToteams")
  matchStats_matchStats_team2IdToteams matchStat[]              @relation("matchStats_team2IdToteams")
  matches_team1                        TournamentMatch[]        @relation("team1")
  matches_team2                        TournamentMatch[]        @relation("team2")
  seasonApplicationForms               seasonApplicationForms[]
  seasonTeamStats                      SeasonTeamStat[]
  season_team                          SeasonTeam[]
  season_teamMember                    SeasonTeamMember[]
  stadiums                             stadiums[]
  teamHistories                        teamHistories[]
  teamMembers                          TeamMember[]

  @@map("teams")
  @@schema("tournament")
}

model Tournament {
  id                Int                     @id @default(autoincrement())
  clientId          Int
  title             String?                 @db.VarChar(255)
  description       String?                 @db.VarChar(255)
  website           String?                 @db.VarChar(255)
  state             enum_tournaments_state
  sort              Int
  meta              Json?                   @db.Json
  createdAt         DateTime                @default(now()) @db.Timestamptz(6)
  updatedAt         DateTime                @updatedAt() @db.Timestamptz(6)
  deletedAt         DateTime?               @db.Timestamptz(6)
  preview           String?                 @db.VarChar
  sport             String                  @db.VarChar
  system            enum_tournaments_system
  tournamentData    tournamentData[]
  disqualifications disqualifications[]
  seasons           Season[]
  tours             Tour[]

  @@map("tournaments")
  @@schema("tournament")
}

model Tour {
  id           Int               @id @default(autoincrement())
  title        String?           @db.VarChar(255)
  description  String?           @db.VarChar(255)
  tournamentId Int
  seasonId     Int
  number       Int
  startDate    DateTime?         @db.Timestamptz(6)
  finishDate   DateTime?         @db.Timestamptz(6)
  state        enum_tours_state
  sort         Int
  meta         Json?             @db.Json
  createdAt    DateTime          @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime          @updatedAt() @db.Timestamptz(6)
  deletedAt    DateTime?         @db.Timestamptz(6)
  matches      TournamentMatch[]
  seasons      Season            @relation(fields: [seasonId], references: [id], onDelete: Cascade)
  tournaments  Tournament        @relation(fields: [tournamentId], references: [id], onDelete: NoAction)

  @@unique([seasonId, number], name: "tours_seasonId_number_key")
  @@map("tours")
  @@schema("tournament")
}

model translations {
  id        Int                      @id @default(autoincrement())
  entity    enum_translations_entity
  entityId  Int
  localeId  Int
  field     String                   @db.VarChar(255)
  value     String?                  @db.VarChar(255)
  createdAt DateTime                 @default(now()) @db.Timestamptz(6)
  updatedAt DateTime                 @updatedAt() @db.Timestamptz(6)
  deletedAt DateTime?                @db.Timestamptz(6)

  @@schema("tournament")
}

//
// users.prisma
//

model ApplicationData {
  id           Int                          @id @default(autoincrement())
  fieldId      Int
  localeId     Int?
  instanceId   Int
  value        String?                      @db.VarChar(1024)
  createdAt    DateTime                     @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime                     @updatedAt() @db.Timestamptz(6)
  field        ApplicationField             @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  applications Application                  @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  translations ApplicationDataTranslation[]

  @@index([value], map: "application_data_value")
  @@map("_applicationData")
  @@schema("users")
}

model ApplicationDataTranslation {
  id              Int             @id @default(autoincrement())
  localeId        Int
  dataId          Int
  value           String          @db.VarChar(255)
  createdAt       DateTime        @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime        @updatedAt() @db.Timestamptz(6)
  /// @TypeGraphQL.omit(output: true, input: true)
  applicationData ApplicationData @relation(fields: [dataId], references: [id], onDelete: NoAction)

  @@index([dataId, localeId], map: "application_data_translation_data_id_locale_id")
  @@map("_applicationDataTranslation")
  @@schema("users")
}

model ApplicationFieldTranslation {
  id        Int              @id @default(autoincrement())
  localeId  Int
  fieldId   Int
  value     String           @db.VarChar(255)
  createdAt DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt DateTime         @updatedAt() @db.Timestamptz(6)
  /// @TypeGraphQL.omit(output: true, input: true)
  field     ApplicationField @relation(fields: [fieldId], references: [id], onDelete: Cascade)

  @@index([fieldId, localeId], map: "application_field_translation_field_id_locale_id")
  @@map("_applicationFieldTranslation")
  @@schema("users")
}

model ApplicationField {
  id                          Int                              @id @default(autoincrement())
  clientId                    Int
  relationId                  Int
  name                        String                           @db.VarChar(255)
  dataType                    enum__applicationFields_dataType
  isReadOnly                  Boolean                          @default(false)
  sort                        Int
  createdAt                   DateTime                         @default(now()) @db.Timestamptz(6)
  updatedAt                   DateTime                         @updatedAt() @db.Timestamptz(6)
  i18n                        Int?
  applicationData             ApplicationData[]
  applicationFieldTranslation ApplicationFieldTranslation[]

  @@index([relationId], map: "application_fields_relation_id")
  @@map("_applicationFields")
  @@schema("users")
}

model UserData {
  id                  Int                   @id @default(autoincrement())
  fieldId             Int
  localeId            Int?
  instanceId          Int
  value               String?               @db.VarChar(1024)
  createdAt           DateTime              @default(now()) @db.Timestamptz(6)
  updatedAt           DateTime              @updatedAt() @db.Timestamptz(6)
  field               UserField             @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  users               User                  @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  userDataTranslation UserDataTranslation[]

  @@unique([instanceId, fieldId], map: "user_data_instanceId_fieldId")
  @@index([value], map: "user_data_value")
  @@map("_userData")
  @@schema("users")
}

model UserDataTranslation {
  id        Int      @id @default(autoincrement())
  localeId  Int
  dataId    Int
  value     String   @db.VarChar(255)
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt() @db.Timestamptz(6)
  userData  UserData @relation(fields: [dataId], references: [id], onDelete: NoAction)

  @@index([dataId, localeId], map: "user_data_translation_data_id_locale_id")
  @@map("_userDataTranslation")
  @@schema("users")
}

model UserFieldTranslation {
  id         Int       @id @default(autoincrement())
  localeId   Int
  fieldId    Int
  value      String    @db.VarChar(255)
  createdAt  DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt  DateTime  @updatedAt() @db.Timestamptz(6)
  userFields UserField @relation(fields: [fieldId], references: [id], onDelete: Cascade)

  @@index([fieldId, localeId], map: "user_field_translation_field_id_locale_id")
  @@map("_userFieldTranslation")
  @@schema("users")
}

model UserField {
  id                   Int                       @id @default(autoincrement())
  clientId             Int
  relationId           Int
  name                 String                    @db.VarChar(255)
  dataType             enum__userFields_dataType
  isReadOnly           Boolean                   @default(false)
  sort                 Int
  createdAt            DateTime                  @default(now()) @db.Timestamptz(6)
  updatedAt            DateTime                  @updatedAt() @db.Timestamptz(6)
  i18n                 Int?
  userData             UserData[]
  userFieldTranslation UserFieldTranslation[]

  @@index([relationId], map: "user_fields_relation_id")
  @@map("_userFields")
  @@schema("users")
}

model ApplicationType {
  id           Int           @id @default(autoincrement())
  clientId     Int
  name         String        @db.VarChar(255)
  description  String?       @db.VarChar(255)
  createdAt    DateTime      @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime      @updatedAt() @db.Timestamptz(6)
  deletedAt    DateTime?     @db.Timestamptz(6)
  settings     Json?         @db.Json
  applications Application[]

  @@map("applicationTypes")
  @@schema("users")
}

model Application {
  id        Int                           @id @default(autoincrement())
  clientId  Int
  userId    Int?
  typeId    Int
  payload   Json?                         @db.Json
  state     users_enum_applications_state @default(NEW)
  comment   String?                       @db.VarChar(255)
  createdAt DateTime                      @default(now()) @db.Timestamptz(6)
  updatedAt DateTime                      @updatedAt() @db.Timestamptz(6)
  deletedAt DateTime?                     @db.Timestamptz(6)
  data      ApplicationData[]
  type      ApplicationType               @relation(fields: [typeId], references: [id], onDelete: Cascade, map: "applications_fk")
  users     User?                         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("applications")
  @@schema("users")
}

model Confirmation {
  id        Int                     @id @default(autoincrement())
  clientId  Int
  value     String                  @db.VarChar(255)
  type      enum_confirmation_type
  key       String                  @db.VarChar(255)
  state     enum_confirmation_state @default(ACTIVE)
  expiresAt DateTime                @db.Timestamptz(6)
  createdAt DateTime                @default(now()) @db.Timestamptz(6)
  updatedAt DateTime                @updatedAt() @db.Timestamptz(6)
  userId    Int?
  users     User?                   @relation(fields: [userId], references: [id])

  @@index([key, value, type, userId, state, expiresAt], map: "confirmation_key_value_type_user_id_state_expires_at")
  @@map("confirmation")
  @@schema("users")
}

model Documents {
  id        Int                   @id @default(autoincrement())
  clientId  Int
  userId    Int
  kidId     Int?
  type      enum_documents_type
  data      Json?                 @db.Json
  state     enum_documents_state? @default(INACTIVE)
  createdAt DateTime              @default(now()) @db.Timestamptz(6)
  updatedAt DateTime              @updatedAt() @db.Timestamptz(6)
  deletedAt DateTime?             @db.Timestamptz(6)
  KidId     Int?
  kids      Kid?                  @relation(fields: [KidId], references: [id])
  users     User                  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("documents")
  @@schema("users")
}

model UserGroup {
  id          Int           @id @default(autoincrement())
  clientId    Int
  name        String        @db.VarChar(255)
  sort        Int           @default(0)
  createdAt   DateTime      @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime      @updatedAt() @db.Timestamptz(6)
  deletedAt   DateTime?     @db.Timestamptz(6)
  usersCount  Int           @default(0)
  userToGroup UserToGroup[]

  @@map("groups")
  @@schema("users")
}

model Kid {
  id                 Int               @id @default(autoincrement())
  clientId           Int
  userId             Int
  state              enum_kids_state   @default(NEW)
  firstName          String            @db.VarChar(255)
  lastName           String            @db.VarChar(255)
  middleName         String?           @db.VarChar(255)
  birthday           DateTime          @db.Timestamptz(6)
  gender             enum_kids_gender?
  isSeasonTicket     Boolean?
  seasonTicket       String?           @db.VarChar(255)
  isSeasonTicketPast Boolean?
  height             Int?
  createdAt          DateTime          @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime          @updatedAt() @db.Timestamptz(6)
  deletedAt          DateTime?         @db.Timestamptz(6)
  documents          Documents[]
  user               User              @relation(fields: [userId], references: [id], onDelete: NoAction)

  @@map("kids")
  @@schema("users")
}

model MatchEventSubscribers {
  deviceId  Int
  clientId  Int
  eventName enum_matchEventSubscribers_eventName
  teamIdx   Int[]
  createdAt DateTime                             @default(now()) @db.Timestamptz(6)
  updatedAt DateTime                             @updatedAt() @db.Timestamptz(6)

  @@id([deviceId, clientId, eventName])
  @@unique([deviceId, clientId, eventName], map: "match_event_subscribers_device_id_client_id_event_name")
  @@map("matchEventSubscribers")
  @@schema("users")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model Pin {
  id        Int             @id @default(autoincrement())
  clientId  Int
  code      String          @db.VarChar(255)
  phone     String          @db.VarChar(255)
  deviceId  String?         @db.VarChar(255)
  userIP    String?         @db.VarChar(255)
  state     enum_pins_state @default(SENT)
  attempts  Int             @default(0)
  headers   String?         @db.VarChar(255)
  createdAt DateTime        @default(now()) @db.Timestamptz(6)
  updatedAt DateTime        @updatedAt() @db.Timestamptz(6)

  @@map("pins")
  @@schema("users")
}

model UserSettings {
  id             Int         @id @default(autoincrement())
  clientId       Int
  emailSettings  Json        @db.Json
  createdAt      DateTime    @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime    @updatedAt() @db.Timestamptz(6)
  defaultGroupId Int?
  pushTransport  Int?
  emailTransport Int?
  emailSender    String?     @db.VarChar(255)
  pushTemplate   Int?
  emailTemplate  Int?
  SystemUser     SystemUser? @relation(fields: [systemUserId], references: [id])
  systemUserId   Int?

  @@map("settings")
  @@schema("users")
}

model Subscriber {
  id             String       @id @db.VarChar(255)
  clientId       Int
  userId         Int
  subscriptionId Int
  modifierId     Int?
  createdAt      DateTime     @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime     @updatedAt() @db.Timestamptz(6)
  subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  users          User         @relation(fields: [userId], references: [id], onDelete: NoAction)

  @@index([clientId])
  @@index([modifierId])
  @@index([userId])
  @@map("subscribers")
  @@schema("users")
}

model SubscriberLog {
  id             Int                       @id @default(autoincrement())
  userId         Int
  subscriptionId Int
  state          enum_subscribersLog_state
  reason         String                    @db.VarChar(255)
  systemUserId   Int
  createdAt      DateTime                  @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime                  @updatedAt() @db.Timestamptz(6)

  @@index([userId, subscriptionId], map: "subscribers_log_user_id_subscription_id")
  @@map("subscribersLog")
  @@schema("users")
}

model Subscription {
  id               Int                       @id @default(autoincrement())
  clientId         Int
  state            enum_subscriptions_state  @default(INACTIVE)
  name             String                    @db.VarChar(255)
  access           enum_subscriptions_access
  description      String?                   @db.VarChar(255)
  subscribersCount Int                       @default(0)
  createdAt        DateTime                  @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime                  @updatedAt() @db.Timestamptz(6)
  isDefault        Boolean                   @default(false)
  subscribers      Subscriber[]

  @@map("subscriptions")
  @@schema("users")
}

model UserAnalyticFields {
  id                Int                              @id @default(autoincrement())
  clientId          Int
  name              String                           @db.VarChar(255)
  dataType          enum_userAnalyticFields_dataType
  isReadOnly        Boolean                          @default(false)
  sort              Int
  createdAt         DateTime                         @default(now()) @db.Timestamptz(6)
  updatedAt         DateTime                         @updatedAt() @db.Timestamptz(6)
  relationId        Int                              @default(0)
  userAnalyticsData UserAnalyticsData[]

  @@map("userAnalyticFields")
  @@schema("users")
}

model UserAnalyticsData {
  id         Int                @id @default(autoincrement())
  fieldId    Int
  field      UserAnalyticFields @relation(fields: [fieldId], references: [id])
  instanceId Int
  value      String?            @db.VarChar(255)
  createdAt  DateTime           @default(now()) @db.Timestamptz(6)
  updatedAt  DateTime           @updatedAt() @db.Timestamptz(6)
  userId     Int?
  users      User?              @relation(fields: [userId], references: [id])

  @@index([fieldId], map: "user_analytics_data_field_id")
  @@map("userAnalyticsData")
  @@schema("users")
}

model users_userData {
  id              Int             @id @default(autoincrement())
  value           String?         @db.VarChar(255)
  createdAt       DateTime        @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime        @updatedAt() @db.Timestamptz(6)
  userId          Int?
  userDataFieldId Int?
  userDataFields  UserDataFields? @relation(fields: [userDataFieldId], references: [id])
  users           User?           @relation(fields: [userId], references: [id])

  @@unique([userId, userDataFieldId], map: "user_data_user_id_user_data_field_id")
  @@index([value, userDataFieldId, userId], map: "user_data_value_user_data_field_id_user_id")
  @@map("userData")
  @@schema("users")
}

model UserDataFields {
  id           Int                          @id @default(autoincrement())
  clientId     Int
  name         String                       @db.VarChar(255)
  title        String                       @db.VarChar(255)
  dataType     enum_userDataFields_dataType
  options      String[]                     @db.VarChar(255)
  createdAt    DateTime                     @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime                     @updatedAt() @db.Timestamptz(6)
  isSystem     Boolean                      @default(false)
  defaultValue String?                      @db.VarChar(255)
  userData     users_userData[]

  @@index([name, dataType], map: "user_data_fields_name_data_type")
  @@map("userDataFields")
  @@schema("users")
}

model UserDevice {
  id                      Int                      @unique(map: "user_devices_pkey") @default(autoincrement())
  userId                  Int?
  clientId                Int
  bundleId                String?                  @db.VarChar(32)
  brand                   String?                  @db.VarChar(32)
  deviceId                String?                  @db.VarChar(64)
  deviceLocale            String?                  @db.VarChar(16)
  deviceName              String?                  @db.VarChar(32)
  deviceModel             String?                  @db.VarChar(32)
  installReferrer         String?                  @db.VarChar(128)
  manufacturer            String?                  @db.VarChar(32)
  systemName              String?                  @db.VarChar(32)
  systemVersion           String?                  @db.VarChar(32)
  appVersion              String?                  @db.VarChar(32)
  userAgent               String?                  @db.VarChar(255)
  pushToken               String?                  @db.VarChar(255)
  installId               String?                  @db.VarChar(255)
  expoPushToken           String?                  @db.VarChar(255)
  createdAt               DateTime                 @default(now()) @db.Timestamptz(6)
  updatedAt               DateTime                 @updatedAt() @db.Timestamptz(6)
  deletedAt               DateTime?                @db.Timestamptz(6)
  APNSPushToken           String?                  @db.VarChar(255)
  users                   User?                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  DeviceMatchSubscription DeviceMatchSubscription?

  @@index([installId], map: "user_devices_install_id")
  @@index([userId], map: "user_devices_user_id")
  @@index([installId], map: "userdevices_installid_idx")
  @@map("userDevices")
  @@schema("users")
}

model UserLocation {
  id        Int                     @id @default(autoincrement())
  userId    Int?
  deviceId  String?                 @db.VarChar(255)
  coords    Unsupported("geometry") @default(dbgenerated("st_geomfromgeojson('{\"latitude\":0,\"longitude\":0}'::text)"))
  createdAt DateTime                @default(now()) @db.Timestamptz(6)
  updatedAt DateTime                @updatedAt() @db.Timestamptz(6)
  deletedAt DateTime?               @db.Timestamptz(6)

  @@unique([userId, deviceId], map: "user_locations_user_id_device_id")
  @@index([userId], map: "user_locations_user_id")
  @@map("userLocations")
  @@schema("users")
}

model UserSession {
  id           Int       @id @default(autoincrement())
  userId       Int
  clientId     Int
  accessToken  String    @db.VarChar(511)
  refreshToken String    @db.VarChar(255)
  ip           String?   @db.VarChar(255)
  deviceId     String?   @db.VarChar(255)
  createdAt    DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime  @updatedAt() @db.Timestamptz(6)
  deletedAt    DateTime? @db.Timestamptz(6)
  users        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, accessToken])
  @@index([deviceId], map: "user_sessions_device_id")
  @@index([userId], map: "user_sessions_user_id")
  @@map("userSessions")
  @@schema("users")
}

model UserSocialAccount {
  id              Int                                   @id @default(autoincrement())
  userId          Int?
  state           enum_userSocialAccounts_state         @default(ACTIVE)
  socialNetwork   enum_userSocialAccounts_socialNetwork
  socialNetworkId String                                @db.VarChar(255)
  payload         String
  expiresAt       DateTime?                             @db.Timestamptz(6)
  createdAt       DateTime                              @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime                              @updatedAt() @db.Timestamptz(6)
  deletedAt       DateTime?                             @db.Timestamptz(6)
  clientId        Int

  @@map("userSocialAccounts")
  @@schema("users")
}

model UserToGroup {
  userId    Int
  groupId   Int
  createdAt DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt DateTime  @updatedAt() @db.Timestamptz(6)
  group     UserGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, groupId])
  @@unique([userId, groupId], map: "user_to_groups_user_id_group_id")
  @@index([groupId], map: "userToGroups_groupId")
  @@map("userToGroups")
  @@schema("users")
}

model User {
  id                Int                    @id @default(autoincrement())
  clientId          Int
  uuid              String                 @unique @default(uuid())
  state             users_enum_users_state @default(INACTIVE)
  username          String                 @db.VarChar(255)
  firstName         String?                @db.VarChar(255)
  lastName          String?                @db.VarChar(255)
  middleName        String?                @db.VarChar(255)
  birthday          DateTime?              @db.Timestamptz(6)
  email             String?                @db.VarChar(255)
  phone             String?                @db.VarChar(255)
  password          String?                @db.VarChar(255)
  gender            enum_users_gender?
  isVerifiedEmail   Boolean                @default(false)
  isVerifiedPhone   Boolean                @default(false)
  createdAt         DateTime               @default(now()) @db.Timestamptz(6)
  updatedAt         DateTime               @updatedAt @db.Timestamptz(6)
  refreshToken      String?                @db.VarChar
  source            String                 @default("empty") @db.VarChar
  data              UserData[]
  applications      Application[]
  accounts          Account[]
  confirmation      Confirmation[]
  documents         Documents[]
  kids              Kid[]
  subscribers       Subscriber[]
  userAnalyticsData UserAnalyticsData[]
  userDevices       UserDevice[]
  userSessions      UserSession[]
  userToGroup       UserToGroup[]
  users_userData    users_userData[]
  CommerceOrder     CommerceOrder[]

  @@unique([clientId, email], map: "users_client_id_email")
  @@unique([clientId, phone], map: "users_client_id_phone")
  @@index([username, phone, uuid, email], map: "users_username_phone_uuid_email")
  @@map("users")
  @@schema("users")
}

model DeviceMatchSubscription {
  id        Int        @id @default(autoincrement())
  deviceId  Int        @unique
  device    UserDevice @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  topics    Json
  createdAt DateTime   @default(now()) @db.Timestamptz(6)
  updatedAt DateTime   @updatedAt() @db.Timestamptz(6)

  @@map("deviceMatchSubscriptions")
  @@schema("users")
}

model Locale {
  id        Int      @id @default(autoincrement())
  iso       String   @db.VarChar(5)
  title     String   @db.VarChar(255)
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt() @db.Timestamptz(6)

  @@map("locales")
  @@schema("system")
}

model Client {
  id           Int               @id @default(autoincrement())
  title        String?           @db.VarChar(255)
  type         enum_clients_type @default(INDIVIDUAL)
  logo         String?           @db.VarChar(255)
  website      String?           @db.VarChar(255)
  colors       String[]          @db.VarChar
  domain       String?           @db.VarChar(255)
  createdAt    DateTime          @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime          @updatedAt() @db.Timestamptz(6)
  locales      Int[]
  apiKeys      ApiKey[]
  authSessions AuthSession[]
  currencies   SystemCurrency[]
  userACL      userACL[]
  userClients  UserClient[]

  @@map("clients")
  @@schema("system")
}

model ApiKey {
  id        Int        @id @default(autoincrement())
  key       String     @db.VarChar(255)
  createdAt DateTime   @default(now()) @db.Timestamptz(6)
  updatedAt DateTime   @updatedAt() @db.Timestamptz(6)
  clientId  Int
  userId    Int
  secret    String     @db.VarChar
  clients   Client     @relation(fields: [clientId], references: [id])
  users     SystemUser @relation(fields: [userId], references: [id])

  @@map("apiKeys")
  @@schema("system")
}

model AuthSession {
  id        String                  @id @default(uuid()) @db.Uuid
  state     enum_authSessions_state @default(ACTIVE)
  userAgent String                  @db.VarChar(255)
  ip        String                  @db.VarChar(255)
  createdAt DateTime                @default(now()) @db.Timestamptz(6)
  updatedAt DateTime                @updatedAt() @db.Timestamptz(6)
  clientId  Int?
  userId    Int?
  clients   Client?                 @relation(fields: [clientId], references: [id])
  users     SystemUser?             @relation(fields: [userId], references: [id])

  @@map("authSessions")
  @@schema("system")
}

model SystemCurrency {
  id        Int      @id @default(autoincrement())
  iso3      String   @db.VarChar(3)
  name      String   @db.VarChar(255)
  sign      String   @db.VarChar(255)
  isDefault Boolean
  isVirtual Boolean
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt() @db.Timestamptz(6)
  clientId  Int?
  clients   Client?  @relation(fields: [clientId], references: [id])

  @@map("currencies")
  @@schema("system")
}

model UserClient {
  role      enum_userClients_role
  clientId  Int
  userId    Int
  createdAt DateTime              @default(now()) @db.Timestamptz(6)
  updatedAt DateTime              @updatedAt() @db.Timestamptz(6)
  clients   Client                @relation(fields: [clientId], references: [id], onDelete: Cascade)
  users     SystemUser            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([clientId, userId])
  @@map("userClients")
  @@schema("system")
}

model SystemUser {
  id           Int                     @id @default(autoincrement())
  state        system_enum_users_state @default(INACTIVE)
  username     String                  @db.VarChar(255)
  firstName    String?                 @db.VarChar(255)
  lastName     String?                 @db.VarChar(255)
  middleName   String?                 @db.VarChar(255)
  email        String                  @db.VarChar(255)
  phone        String?                 @db.VarChar(255)
  password     String                  @db.VarChar(255)
  photo        String?                 @db.VarChar(255)
  locale       String                  @default("en") @db.VarChar(255)
  isSystem     Boolean                 @default(false)
  createdAt    DateTime                @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime                @updatedAt() @db.Timestamptz(6)
  deletedAt    DateTime?               @db.Timestamptz(6)
  apiKeys      ApiKey[]
  authSessions AuthSession[]
  userACL      userACL[]
  userClients  UserClient[]
  userSettings UserSettings[]

  @@map("users")
  @@schema("system")
}

model userACL {
  id        Int        @id @default(autoincrement())
  userId    Int
  clientId  Int
  aclId     String     @db.VarChar(255)
  createdAt DateTime   @default(now()) @db.Timestamptz(6)
  updatedAt DateTime   @updatedAt() @db.Timestamptz(6)
  acl       acl        @relation(fields: [aclId], references: [id], onDelete: Cascade)
  clients   Client     @relation(fields: [clientId], references: [id], onDelete: Cascade)
  users     SystemUser @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@schema("system")
}

model acl {
  id            String          @id @db.VarChar(255)
  parentId      String?         @db.VarChar(255)
  name          String?         @db.VarChar(255)
  createdAt     DateTime        @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime        @updatedAt() @db.Timestamptz(6)
  navigationAcl NavigationAcl[]
  userACL       userACL[]

  @@schema("system")
}

model NavigationAcl {
  aclId        String     @db.VarChar(255)
  navigationId Int
  acl          acl        @relation(fields: [aclId], references: [id], onDelete: Cascade)
  navigation   Navigation @relation(fields: [navigationId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime   @updatedAt() @db.Timestamptz(6)

  @@id([aclId, navigationId])
  @@map("navigationAcl")
  @@schema("system")
}

model Navigation {
  id            Int             @id @default(autoincrement())
  parentId      Int             @default(0)
  name          String          @db.VarChar(255)
  url           String          @db.VarChar(255)
  icon          String          @db.VarChar(255)
  sort          Int             @default(0)
  createdAt     DateTime        @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime        @updatedAt() @db.Timestamptz(6)
  navigationAcl NavigationAcl[]

  @@map("navigation")
  @@schema("system")
}

// ===============================================================================================================================================
// ===============================================================================================================================================
// ===============================================================================================================================================

enum enum_articleAuthors_role {
  AUTHOR
  EDITOR
  JOURNALIST
  PHOTOGRAPHER
  PHOTO_EDITOR

  @@schema("article")
}

enum enum_articleBlocks_type {
  EMBED
  ENTITY
  HTML
  SUB_TITLE
  INCUT
  PHOTO_GALLERY
  TITLE
  VIDEO
  CODE
  LINK
  TEXT
  PDF
  ACTIONS

  @@schema("article")
}

enum enum_articleLinks_entityType {
  MATCH
  TOUR
  TEAM
  EVENT
  PLAYER

  @@schema("article")
}

enum enum_articleLog_state {
  DRAFT
  CHECKING
  DELETED
  FACT_CHECKING
  PUBLISHED

  @@schema("article")
}

enum enum_articles_state {
  DRAFT
  CHECKING
  DELETED
  FACT_CHECKING
  PUBLISHED

  @@schema("article")
}

enum enum__catalogueCategoryFields_dataType {
  BOOLEAN
  NUMBER
  STRING
  ENUM
  ARRAY
  FILES
  JSON

  @@schema("catalogue")
}

enum enum__catalogueFields_dataType {
  BOOLEAN
  NUMBER
  STRING
  ENUM
  ARRAY
  FILES
  JSON

  @@schema("catalogue")
}

enum enum__catalogueItemFields_dataType {
  BOOLEAN
  NUMBER
  STRING
  ENUM
  ARRAY
  FILES
  JSON

  @@schema("catalogue")
}

enum enum_catalogueCategories_state {
  INACTIVE
  ACTIVE
  DELETED

  @@schema("catalogue")
}

enum enum_catalogueFields_dataType {
  BOOLEAN
  NUMBER
  STRING
  ENUM
  ARRAY
  FILES

  @@schema("catalogue")
}

enum enum_catalogueFields_type {
  ITEM
  CATEGORY

  @@schema("catalogue")
}

enum enum_catalogueItems_state {
  INACTIVE
  ACTIVE
  DELETED

  @@schema("catalogue")
}

enum enum_catalogueItems_type {
  ITEM
  CATEGORY

  @@schema("catalogue")
}

enum enum_catalogueRelations_type {
  CATEGORY
  ITEM

  @@schema("catalogue")
}

enum enum_catalogues_state {
  INACTIVE
  ACTIVE
  DELETED

  @@schema("catalogue")
}

enum enum_orderFields_dataType {
  BOOLEAN
  NUMBER
  STRING
  ENUM
  ARRAY
  FILES

  @@schema("commerce")
}

enum enum_orderItems_state {
  INACTIVE
  ACTIVE
  DELETED

  @@schema("commerce")
}

enum enum_orderLogs_orderState {
  NEW
  PROCESSING
  ON_DELIVERY
  DELIVERED
  DONE
  CANCELLED

  @@schema("commerce")
}

enum enum_orders_paymentState {
  UNPAID
  PAID

  @@schema("commerce")
}

enum enum_orders_state {
  NEW
  PROCESSING
  ON_DELIVERY
  DELIVERED
  DONE
  CANCELLED

  @@schema("commerce")
}

enum enum_shops_state {
  INACTIVE
  ACTIVE
  DELETED

  @@schema("commerce")
}

enum enum__eventFields_dataType {
  BOOLEAN
  NUMBER
  STRING
  ENUM
  ARRAY
  FILES
  JSON

  @@schema("event")
}

enum enum__eventOrderFields_dataType {
  BOOLEAN
  NUMBER
  STRING
  ENUM
  ARRAY
  FILES
  JSON

  @@schema("event")
}

enum enum__eventOrderTicketFields_dataType {
  BOOLEAN
  NUMBER
  STRING
  ENUM
  ARRAY
  FILES
  JSON

  @@schema("event")
}

enum enum_eventOrders_paymentState {
  UNPAID
  PAID

  @@schema("event")
}

enum enum_eventOrders_state {
  NEW
  PROCESSING
  ON_DELIVERY
  DELIVERED
  DONE
  CANCELLED

  @@schema("event")
}

enum enum_events_state {
  INACTIVE
  ACTIVE
  DELETED

  @@schema("event")
}

enum loyalty_enum_applications_state {
  NEW
  PROCESSING
  ACCEPTED
  DECLINED

  @@map("enum_applications_state")
  @@schema("loyalty")
}

enum enum_partners_state {
  INACTIVE
  ACTIVE
  DELETED

  @@schema("loyalty")
}

enum enum_promoCodes_state {
  NEW
  EXPIRED
  PROCESSING
  APPLIED

  @@schema("loyalty")
}

enum enum_promos_codeType {
  UNIQUE
  SINGLE

  @@schema("loyalty")
}

enum enum_promos_state {
  DRAFT
  ACTIVE
  FINISHED
  ARCHIVED

  @@schema("loyalty")
}

enum enum_accounts_state {
  INACTIVE
  ACTIVE
  DELETED

  @@schema("payment")
}

enum enum_bankCards_state {
  INACTIVE
  ACTIVE
  DELETED

  @@schema("payment")
}

enum enum_channels_state {
  INACTIVE
  ACTIVE
  DELETED

  @@schema("payment")
}

enum enum_gateways_state {
  INACTIVE
  ACTIVE
  DELETED

  @@schema("payment")
}

enum enum_inAppPurchases_store {
  APP_STORE
  GOOGLE_PLAY

  @@schema("payment")
}

enum enum_inAppSettings_store {
  APP_STORE
  GOOGLE_PLAY

  @@schema("payment")
}

enum enum_inAppTransactions_side {
  CHARGE
  DEPOSIT

  @@schema("payment")
}

enum enum_inAppTransactions_state {
  AUTH
  HOLD
  PROCESSED
  FAILED
  CANCELLED

  @@schema("payment")
}

enum enum_inAppTransactions_store {
  APP_STORE
  GOOGLE_PLAY

  @@schema("payment")
}

enum enum_providers_state {
  INACTIVE
  ACTIVE
  DELETED

  @@schema("payment")
}

enum enum_transactionLogs_operation {
  AUTH
  CONFIRM_AUTH
  HOLD
  CONFIRM_HOLD
  CHARGE
  DEPOSIT
  REFUND
  CANCEL

  @@schema("payment")
}

enum enum_transactions_orderType {
  ECOMMERCE
  TICKET

  @@schema("payment")
}

enum enum_transactions_side {
  CHARGE
  DEPOSIT

  @@schema("payment")
}

enum enum_transactions_state {
  AUTH
  HOLD
  PROCESSED
  FAILED
  CANCELLED

  @@schema("payment")
}

enum enum_quizes_state {
  ACTIVE
  INACTIVE
  FINISHED
  DELETED

  @@schema("quiz")
}

enum enum_quizes_type {
  QUIZ
  POLL

  @@schema("quiz")
}

enum enum_socialNetworks_state {
  INACTIVE
  ACTIVE
  DELETED

  @@schema("social")
}

enum enum_socialNewsSettings_entityType {
  TEAM
  TEAM_MEMBER
  TOURNAMENT

  @@schema("social")
}

enum enum_socialNewsSettings_state {
  INACTIVE
  ACTIVE
  DELETED

  @@schema("social")
}

enum enum_asyncTasks_entity {
  SUBSCRIPTION
  MESSENGER_QUEUE
  EVENT_WHITELIST
  USER_GROUP
  IMPORT
  USER

  @@schema("system")
}

enum enum_asyncTasks_state {
  NEW
  PROCESSING
  FINISHED
  CANCELLED

  @@schema("system")
}

enum enum_authSessions_state {
  ACTIVE
  FINISHED

  @@schema("system")
}

enum enum_clients_type {
  INDIVIDUAL
  LEGAL_ENTITY

  @@schema("system")
}

enum enum_tasks_state {
  PROCESSING
  DONE
  CANCELLED

  @@schema("system")
}

enum enum_userClients_role {
  ADMIN
  MEMBER
  OWNER

  @@schema("system")
}

enum system_enum_users_state {
  ACTIVE
  INACTIVE
  BLOCKED

  @@map("enum_users_state")
  @@schema("system")
}

enum enum_webhooks_entity {
  EVENT
  ORDER
  USER
  TICKET

  @@schema("system")
}

enum enum_webhooks_operation {
  IMPORT
  LOAD
  CREATE
  UPDATE
  DELETE
  SYNC

  @@schema("system")
}

enum enum__matchFields_dataType {
  BOOLEAN
  NUMBER
  STRING
  ENUM
  ARRAY
  FILES
  JSON

  @@schema("tournament")
}

enum enum__teamFields_dataType {
  BOOLEAN
  NUMBER
  STRING
  ENUM
  ARRAY
  FILES
  JSON

  @@schema("tournament")
}

enum enum__teamMemberFields_dataType {
  BOOLEAN
  NUMBER
  STRING
  ENUM
  ARRAY
  FILES
  JSON

  @@schema("tournament")
}

enum enum__tournamentFields_dataType {
  BOOLEAN
  NUMBER
  STRING
  ENUM
  ARRAY
  FILES
  JSON

  @@schema("tournament")
}

enum enum_disputeResponses_state {
  ACTIVE
  WIN
  LOSS
  WAITING

  @@schema("tournament")
}

enum enum_disputes_confirmation {
  WAITING
  WIN
  LOSS

  @@schema("tournament")
}

enum enum_disputes_result {
  WIN
  LOSS
  CANCELLED
  MODERATION
  WAITING

  @@schema("tournament")
}

enum enum_disputes_state {
  ACTIVE
  LOCKED
  FINISHED
  DELETED
  ARCHIVED

  @@schema("tournament")
}

enum enum_disqualifications_state {
  CURRENT
  FINISH

  @@schema("tournament")
}

enum enum_groups_stage {
  QUALIFICATION
  GROUPS
  PLAY_OFF
  UNKNOWN

  @@schema("tournament")
}

enum enum_matchEvents_event {
  AUTO_GOAL
  CORNER_KICK
  FREE_KICK
  GOAL
  IN
  MATCH_FINISH
  MATCH_HALFTIME
  MATCH_START
  OUT
  PASS
  ASSIST
  PENALTY
  PENALTY_NO
  RED_CARD
  TRAUMA
  YELLOW_CARD
  YELLOW_CARD2
  COMMENT
  VAR
  VIDEO
  FINAL

  @@schema("tournament")
}

enum enum_matchLineUps_finalRole {
  DEFENDER
  FORWARD
  GOALKEEPER
  HALFBACK

  @@schema("tournament")
}

enum enum_matchLineUps_finalState {
  MAIN
  SUBSTITUTE

  @@schema("tournament")
}

enum enum_matchLineUps_initialRole {
  DEFENDER
  FORWARD
  GOALKEEPER
  HALFBACK

  @@schema("tournament")
}

enum enum_matchLineUps_initialState {
  MAIN
  SUBSTITUTE

  @@schema("tournament")
}

enum enum_matchLineUps_type {
  COACH
  MEDIC
  PLAYER
  REFEREE
  REPRESENTATIVE

  @@schema("tournament")
}

enum enum_matchProtocols_event {
  AUTO_GOAL
  CORNER_KICK
  FREE_KICK
  GOAL
  IN
  MATCH_FINISH
  MATCH_HALFTIME
  MATCH_START
  OUT
  PASS
  ASSIST
  PENALTY
  PENALTY_NO
  RED_CARD
  TRAUMA
  YELLOW_CARD
  YELLOW_CARD2
  COMMENT
  VAR
  VIDEO
  FINAL

  @@schema("tournament")
}

enum enum_matchStats_type {
  SHOT
  SHOTIN
  FAULT
  CORNER
  OFFSIDE
  POSSESSION
  BLOCKED_SHOT
  FREE_KICK
  GOAL_KICK
  THROW_IN
  YELLOW_CARDS
  RED_CARDS

  @@schema("tournament")
}

enum enum_matches_state {
  FINISHED
  PENDING
  PROGRESS
  HALF_TIME
  OVER_TIME
  CANCELED
  FIRST_TIME
  SECOND_TIME
  MOVED
  PAUSE
  PENALTY_SHOOTOUT

  @@schema("tournament")
}

enum enum_season_teamMember_state {
  INACTIVE
  ACTIVE
  DELETED

  @@schema("tournament")
}

enum enum_seasons_state {
  CURRENT
  FINISHED
  FUTURE

  @@schema("tournament")
}

enum enum_teamMemberSocialAccounts_socialNetwork {
  GOOGLE
  YOUTUBE
  FACEBOOK
  INSTAGRAM
  TWITCH
  TWITTER
  VK

  @@schema("tournament")
}

enum enum_teamMemberSocialAccounts_state {
  INACTIVE
  ACTIVE
  DELETED

  @@schema("tournament")
}

enum enum_teamMembers_role {
  DEFENDER
  FORWARD
  GOALKEEPER
  HALFBACK

  @@schema("tournament")
}

enum enum_teamMembers_type {
  COACH
  PLAYER
  REPRESENTATIVE

  @@schema("tournament")
}

enum enum_tournaments_sport {
  FOOTBALL
  HOCKEY
  BASKETBALL
  TENNIS

  @@schema("tournament")
}

enum enum_tournaments_state {
  CURRENT
  FINISHED
  FUTURE

  @@schema("tournament")
}

enum enum_tournaments_system {
  ROUND
  PLAYOFF

  @@schema("tournament")
}

enum enum_tours_state {
  CURRENT
  FINISHED
  FUTURE

  @@schema("tournament")
}

enum enum_translations_entity {
  MATCH
  TEAM
  TEAM_MEMBER
  TOURNAMENT

  @@schema("tournament")
}

enum enum_translations_locale {
  EN
  RU

  @@schema("tournament")
}

enum enum__applicationFields_dataType {
  BOOLEAN
  NUMBER
  STRING
  ENUM
  ARRAY
  FILES
  JSON

  @@schema("users")
}

enum enum__userFields_dataType {
  BOOLEAN
  NUMBER
  STRING
  ENUM
  ARRAY
  FILES
  JSON

  @@schema("users")
}

enum enum_applicationLogs_type {
  CREATE
  UPDATE
  COMMENT

  @@schema("users")
}

enum users_enum_applications_state {
  ACCEPTED
  DECLINED
  NEW
  DELETED

  @@map("enum_applications_state")
  @@schema("users")
}

enum enum_confirmation_state {
  ACTIVE
  VALIDATED
  CANCELLED
  EXPIRED

  @@schema("users")
}

enum enum_confirmation_type {
  EMAIL
  RESET_PASSWORD
  PHONE

  @@schema("users")
}

enum enum_documents_state {
  INACTIVE
  ACTIVE
  DELETED

  @@schema("users")
}

enum enum_documents_type {
  PASSPORT
  BIRTH_CERTIFICATE
  FAN_ID

  @@schema("users")
}

enum enum_kids_gender {
  MALE
  FEMALE

  @@schema("users")
}

enum enum_kids_state {
  ACCEPTED
  DECLINED
  NEW
  DELETED

  @@schema("users")
}

enum enum_matchEventSubscribers_eventName {
  AUTO_GOAL
  CORNER_KICK
  FREE_KICK
  GOAL
  IN
  MATCH_FINISH
  MATCH_HALFTIME
  MATCH_START
  OUT
  PASS
  ASSIST
  PENALTY
  PENALTY_NO
  RED_CARD
  TRAUMA
  YELLOW_CARD
  YELLOW_CARD2
  COMMENT
  VAR
  VIDEO
  FINAL

  @@schema("users")
}

enum enum_pins_state {
  SENT
  VALIDATED
  CANCELLED
  DELETED
  EXPIRED
  BLOCKED

  @@schema("users")
}

enum enum_subscribersLog_state {
  ADDED
  REMOVED

  @@schema("users")
}

enum enum_subscriptions_access {
  PUBLIC
  PRIVATE

  @@schema("users")
}

enum enum_subscriptions_state {
  ACTIVE
  INACTIVE
  DELETED

  @@schema("users")
}

enum enum_subscriptions_type {
  EMAIL
  PUSH
  SMS

  @@schema("users")
}

enum enum_userAnalyticFields_dataType {
  BOOLEAN
  NUMBER
  STRING
  ENUM
  ARRAY
  FILES
  JSON

  @@schema("users")
}

enum enum_userDataFields_dataType {
  NUMBER
  STRING
  ENUM
  BOOLEAN

  @@schema("users")
}

enum enum_userSocialAccounts_socialNetwork {
  TWITCH
  GOOGLE
  INSTAGRAM
  VK
  FACEBOOK
  TWITTER
  RPL
  APPLE

  @@schema("users")
}

enum enum_userSocialAccounts_state {
  INACTIVE
  ACTIVE
  DELETED

  @@schema("users")
}

enum enum_users_gender {
  MALE
  FEMALE

  @@schema("users")
}

enum users_enum_users_state {
  ACTIVE
  INACTIVE
  DELETED
  BLOCKED

  @@map("enum_users_state")
  @@schema("users")
}
