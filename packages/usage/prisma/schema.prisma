// // This is your Prisma schema file,
// // learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  // output   = "./generated/client"
  previewFeatures = ["views"]
  // previewFeatures = ["views"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// GENERATOR CONFIGURATION
// -----------------------------------------------

generator zod {
  provider                         = "node ../generator/dist/bin.js"
  // provider                         = "zod-prisma-types"
  output                           = "./generated/zod" // default is ./generated/zod
  useMultipleFiles                 = false // default is false
  writeBarrelFiles                 = false // default is true
  createInputTypes                 = true // default is true
  createModelTypes                 = true // default is true
  addInputTypeValidation           = false // default is true
  addIncludeType                   = true // default is true
  addSelectType                    = false // default is true
  validateWhereUniqueInput         = false // default is false
  createOptionalDefaultValuesTypes = false // default is false
  createRelationValuesTypes        = true // default is false
  createPartialTypes               = false // default is false
  useDefaultValidators             = false // default is true
  coerceDate                       = false // default is true
  writeNullishInModelTypes         = false // default is false
}

//
// acl.prisma
//

model Acl {
  id            String          @id() @db.VarChar
  parentId      String?         @db.VarChar
  parent        Acl?            @relation("aclToacl", fields: [parentId], references: [id])
  children      Acl[]           @relation("aclToacl")
  navigationAcl NavigationAcl[]
  userACL       UserACL[]
  createdAt     DateTime        @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime        @updatedAt @db.Timestamptz(6)

  @@map("acl")
}

//
// company.prisma
//

model Company {
  id          Int              @id() @default(autoincrement())
  deletedAt   DateTime?        @db.Timestamptz(6)
  name        String           @db.VarChar
  ownerId     Int?             @unique()
  user        User?            @relation(fields: [ownerId], references: [id])
  settings    CompanySettings?
  //       user_companies_company user_companies_company[]
  userSession UserSession[]
  createdAt   DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime         @updatedAt @db.Timestamptz(6)

  @@map("companies")
}

model CompanySettings {
  id            Int      @id() @default(autoincrement())
  schemaVersion Int
  settings      Json
  companyId     Int?     @unique()
  company       Company? @relation(fields: [companyId], references: [id])
  createdAt     DateTime @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime @updatedAt @db.Timestamptz(6)

  @@map("company_settings")
}

model Department {
  id        Int      @id @default(autoincrement())
  name      String
  users     User[]
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)

  @@map("departments")
}

model JobTitle {
  id           Int           @id @default(autoincrement())
  name         String
  users        User[]
  createdAt    DateTime      @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime      @updatedAt @db.Timestamptz(6)
  deletedAt    DateTime?     @db.Timestamptz(6)
  hiringStages HiringStage[]

  @@map("job_titles")
}

//
// document.prisma
//

model Document {
  id                  Int                      @id() @default(autoincrement())
  state               basic_state_enum         @default(INACTIVE)
  name                String                   @db.VarChar
  description         String?                  @db.VarChar
  color               String?                  @db.VarChar
  icon                String?                  @db.VarChar
  parentId            Int?
  sortIndex           Int                      @default(0)
  isMain              Boolean                  @default(false)
  expireDateFieldId   Int?
  companyId           Int
  fields              DocumentField[]
  userDocuments       UserDocument[]
  values              UserDocumentFieldValue[]
  createdAt           DateTime                 @default(now()) @db.Timestamptz(6)
  updatedAt           DateTime                 @updatedAt @db.Timestamptz(6)
  deletedAt           DateTime?                @db.Timestamptz(6)
  hiringStageDocument HiringStageDocument[]
  fieldGroups         DocumentFieldGroup[]

  @@map("documents")
}

model DocumentField {
  id                      Int                      @id() @default(autoincrement())
  documentId              Int
  document                Document                 @relation(fields: [documentId], references: [id])
  groupId                 Int?
  group                   DocumentFieldGroup?      @relation(fields: [groupId], references: [id])
  dataType                field_datatype_enum      @default(STRING)
  name                    String                   @db.VarChar
  options                 Json?                    @db.Json
  title                   String?                  @db.VarChar
  sortIndex               Int                      @default(0)
  validation              Json?                    @db.Json
  companyId               Int
  userDocumentFieldValues UserDocumentFieldValue[]
  createdAt               DateTime                 @default(now()) @db.Timestamptz(6)
  updatedAt               DateTime                 @updatedAt @db.Timestamptz(6)
  deletedAt               DateTime?                @db.Timestamptz(6)

  @@map("document_fields")
}

model DocumentFieldGroup {
  id          Int             @id() @default(autoincrement())
  documentId  Int
  document    Document        @relation(fields: [documentId], references: [id])
  name        String          @db.VarChar
  description String?         @db.VarChar
  createdAt   DateTime        @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime        @updatedAt @db.Timestamptz(6)
  deletedAt   DateTime?       @db.Timestamptz(6)
  sortIndex   Int             @default(0)
  fields      DocumentField[]

  @@map("document_field_groups")
}

model UserDocument {
  id          Int                      @id() @default(autoincrement())
  companyId   Int
  state       user_document_state_enum @default(UPLOADED)
  userId      Int
  documentId  Int?
  isValidated Boolean                  @default(false)
  isExpired   Boolean                  @default(false)
  document    Document?                @relation(fields: [documentId], references: [id])
  user        User                     @relation(fields: [userId], references: [id])
  fieldValues UserDocumentFieldValue[]
  validations UserDocumentValidation[]
  createdAt   DateTime                 @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime                 @updatedAt @db.Timestamptz(6)
  deletedAt   DateTime?                @db.Timestamptz(6)

  @@map("user_documents")
}

model UserDocumentFieldValue {
  id              Int           @id() @default(autoincrement())
  value           String
  documentId      Int
  documentFieldId Int
  isValidated     Boolean       @default(false)
  isAccepted      Boolean       @default(false)
  comment         String?       @db.VarChar
  companyId       Int
  documentField   DocumentField @relation(fields: [documentFieldId], references: [id])
  document        Document      @relation(fields: [documentId], references: [id])
  userDocumentId  Int
  userDocument    UserDocument  @relation(fields: [userDocumentId], references: [id])
  createdAt       DateTime      @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime      @updatedAt @db.Timestamptz(6)
  deletedAt       DateTime?     @db.Timestamptz(6)

  @@unique([documentFieldId, documentId, userDocumentId], map: "field_document")
  @@map("user_document_field_values")
}

model UserDocumentValidation {
  id             Int                            @id() @default(autoincrement())
  state          document_validation_state_enum
  userDocumentId Int
  userDocument   UserDocument                   @relation(fields: [userDocumentId], references: [id])
  createdById    Int
  createdBy      User                           @relation(fields: [createdById], references: [id])
  comment        String?                        @db.VarChar
  createdAt      DateTime                       @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime                       @updatedAt @db.Timestamptz(6)

  @@map("user_document_validations")
}

enum user_document_state_enum {
  UPLOADED
  CONFIRMED
  DECLINED
  VALIDATION
}

enum document_validation_state_enum {
  CONFIRMED
  DECLINED
  REQUESTED_CHANGES
}

//
// facility.prisma
//

model Zone {
  id          Int          @id() @default(autoincrement())
  companyId   Int
  name        String       @db.VarChar
  description String?      @db.VarChar
  facilityId  Int
  facility    Facility     @relation(fields: [facilityId], references: [id])
  area        Json         @db.Json
  deletedAt   DateTime?    @db.Timestamptz(6)
  createdAt   DateTime     @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime     @updatedAt @db.Timestamptz(6)
  checkpoint  Checkpoint[]
  route       Route[]

  @@map("zones")
}

model Route {
  id               Int               @id() @default(autoincrement())
  companyId        Int
  name             String            @db.VarChar
  state            route_state_enum  @default(ACTIVE)
  description      String?           @db.VarChar
  zoneId           Int
  durationBefore   Int?
  duration         Int               @default(0)
  durationAfter    Int?
  zone             Zone              @relation(fields: [zoneId], references: [id])
  routeCheckpoints RouteCheckpoint[]
  deletedAt        DateTime?         @db.Timestamptz(6)
  createdAt        DateTime          @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime          @updatedAt @db.Timestamptz(6)
  TaskTemplate     TaskTemplate[]

  @@map("routes")
}

model RouteCheckpoint {
  id            Int        @id() @default(autoincrement())
  companyId     Int
  comment       String?    @db.VarChar
  time          Int
  noPenaltyTime Int?
  checkpointId  Int
  routeId       Int
  sortIndex     Int        @default(0)
  route         Route      @relation(fields: [routeId], references: [id])
  checkpoint    Checkpoint @relation(fields: [checkpointId], references: [id])
  createdAt     DateTime   @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime   @updatedAt @db.Timestamptz(6)
  deletedAt     DateTime?  @db.Timestamptz(6)

  @@map("route_checkpoints")
}

model Facility {
  id          Int         @id @default(autoincrement())
  companyId   Int
  name        String?     @db.VarChar
  description String?     @db.VarChar
  address     String?     @db.VarChar
  coords      Json?       @db.Json
  tasks       Task[]
  userShifts  UserShift[]
  // user_shift_template UserShiftTemplate[]
  zones       Zone[]
  createdAt   DateTime    @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime    @updatedAt @db.Timestamptz(6)
  deletedAt   DateTime?   @db.Timestamptz(6)
  users       User[]

  @@map("facilities")
}

enum route_state_enum {
  INACTIVE
  ACTIVE
  DELETED
}

model Checkpoint {
  createdAt                 DateTime                   @default(now()) @db.Timestamptz(6)
  updatedAt                 DateTime                   @updatedAt @db.Timestamptz(6)
  id                        Int                        @id() @default(autoincrement())
  deletedAt                 DateTime?                  @db.Timestamptz(6)
  companyId                 Int
  name                      String?                    @db.VarChar
  description               String?                    @db.VarChar
  deviceId                  String?                    @db.VarChar
  zoneId                    Int
  coords                    Json?                      @db.Json
  zone                      Zone                       @relation(fields: [zoneId], references: [id])
  routeCheckpoints          RouteCheckpoint[]
  task                      Task[]
  userShiftRouteCheckpoints UserShiftRouteCheckpoint[]

  @@map("checkpoints")
}

//
// hiringStage.prisma
//

model HiringStage {
  id         Int                   @id @default(autoincrement())
  name       String
  documents  HiringStageDocument[]
  jobTitleId Int
  jobTitle   JobTitle              @relation(fields: [jobTitleId], references: [id])
  sortIndex  Int                   @default(0)
  users      User[]
  deletedAt  DateTime?             @db.Timestamptz(6)

  @@map("hiring_stages")
}

model HiringStageDocument {
  id            Int         @id @default(autoincrement())
  hiringStageId Int
  hiringStage   HiringStage @relation(fields: [hiringStageId], references: [id])
  documentId    Int
  document      Document    @relation(fields: [documentId], references: [id])
  isRequired    Boolean
  sortIndex     Int         @default(0)

  @@unique([hiringStageId, documentId], name: "unique_hiringStageId_documentId")
  @@map("hiring_stage_documents")
}

//
// notification.prisma
//

model Notification {
  id          Int                 @id() @default(autoincrement())
  companyId   Int
  title       String              @db.VarChar
  body        String?             @db.VarChar
  from        String              @db.VarChar
  to          String              @db.VarChar
  recipientId Int?
  recipient   User?               @relation(name: "recipientUser", fields: [recipientId], references: [id])
  senderId    Int?
  sender      User?               @relation(name: "senderUser", fields: [senderId], references: [id])
  state       notification_status @default(NEW)
  createdAt   DateTime            @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime            @updatedAt @db.Timestamptz(6)
  deletedAt   DateTime?           @db.Timestamptz(6)

  @@map("notifications")
}

model Reminder {
  id        Int              @id() @default(autoincrement())
  createdAt DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt DateTime         @updatedAt @db.Timestamptz(6)
  deletedAt DateTime?        @db.Timestamptz(6)
  state     basic_state_enum @default(ACTIVE)
  title     String
  date      DateTime
  priority  priority_enum    @default(NORMAL)
  isRead    Boolean          @default(false)

  @@map("reminders")
}

enum notification_status {
  NEW
  SENT
  FAILED
}

//
// shifts.prisma
//

model Task {
  id               Int               @id() @default(autoincrement())
  deletedAt        DateTime?         @db.Timestamptz(6)
  companyId        Int
  name             String            @db.VarChar
  description      String?           @db.VarChar
  plannedDuration  Int?
  startedAt        DateTime?         @db.Timestamptz(6)
  finishedAt       DateTime?         @db.Timestamptz(6)
  state            queue_states_enum @default(WAITING)
  userId           Int?
  reporterId       Int?
  userShiftId      Int?
  time             DateTime          @db.Timestamptz(6)
  sortIndex        Int               @default(0)
  priority         priority_enum     @default(NORMAL)
  facilityId       Int?
  checkpointId     Int?
  facility         Facility?         @relation(fields: [facilityId], references: [id])
  userShiftRouteId Int?              @unique()
  userShiftRoute   UserShiftRoute?   @relation(fields: [userShiftRouteId], references: [id])
  reporter         User?             @relation("task_reporterIdTouser", fields: [reporterId], references: [id])
  userShift        UserShift?        @relation(fields: [userShiftId], references: [id])
  user             User?             @relation("task_userIdTouser", fields: [userId], references: [id])
  checkpoint       Checkpoint?       @relation(fields: [checkpointId], references: [id])
  createdAt        DateTime          @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime          @updatedAt @db.Timestamptz(6)

  @@map("tasks")
}

enum queue_states_enum {
  WAITING
  IN_PROGRESS
  FINISHED
  CANCELLED
}

model ShiftTemplate {
  id                 Int                 @id() @default(autoincrement())
  deletedAt          DateTime?           @db.Timestamptz(6)
  companyId          Int
  name               String              @db.VarChar
  days               Int[]
  instructionId      Int?
  instruction        Instruction?        @relation(fields: [instructionId], references: [id])
  userShiftTemplates UserShiftTemplate[]
  createdAt          DateTime            @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime            @updatedAt @db.Timestamptz(6)

  @@map("shift_templates")
}

model Instruction {
  id                 Int                 @id() @default(autoincrement())
  deletedAt          DateTime?           @db.Timestamptz(6)
  companyId          Int
  name               String              @db.VarChar
  text               String?
  files              Json?               @db.Json
  shiftTemplates     ShiftTemplate[]
  userShifts         UserShift[]
  userShiftTemplates UserShiftTemplate[]
  createdAt          DateTime            @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime            @updatedAt @db.Timestamptz(6)

  @@map("instructions")
}

model UserShift {
  id                     Int                  @id() @default(autoincrement())
  createdAt              DateTime             @default(now()) @db.Timestamptz(6)
  updatedAt              DateTime             @updatedAt @db.Timestamptz(6)
  deletedAt              DateTime?            @db.Timestamptz(6)
  companyId              Int
  userId                 Int?
  user                   User?                @relation(fields: [userId], references: [id])
  facilityId             Int
  facility               Facility             @relation(fields: [facilityId], references: [id])
  instructionsAcceptedAt DateTime?            @db.Timestamptz(6)
  sentryUserId           Int?
  instructionId          Int?
  name                   String?              @db.VarChar
  description            String?              @db.VarChar
  state                  queue_states_enum    @default(WAITING)
  duration               Int                  @default(0)
  startDate              DateTime?            @db.Timestamptz(6)
  finishDate             DateTime?            @db.Timestamptz(6)
  startedAt              DateTime?            @db.Timestamptz(6)
  finishedAt             DateTime?            @db.Timestamptz(6)
  tasks                  Task[]
  instruction            Instruction?         @relation(fields: [instructionId], references: [id])
  equipment              UserShiftEquipment[]

  @@map("user_shifts")
}

model UserShiftTemplate {
  id              Int               @id() @default(autoincrement())
  deletedAt       DateTime?         @db.Timestamptz(6)
  companyId       Int
  shiftTemplateId Int
  instructionId   Int?
  name            String?           @db.VarChar
  description     String?           @db.VarChar
  state           queue_states_enum @default(WAITING)
  duration        Int               @default(0)
  equipmentsIdx   Json?             @db.Json
  facilityId      Int?
  startDate       DateTime?         @db.Timestamptz(6)
  finishDate      DateTime?         @db.Timestamptz(6)
  taskTemplates   TaskTemplate[]
  shiftTemplate   ShiftTemplate     @relation(fields: [shiftTemplateId], references: [id])
  instruction     Instruction?      @relation(fields: [instructionId], references: [id])
  createdAt       DateTime          @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime          @updatedAt @db.Timestamptz(6)

  @@map("user_shift_templates")
}

model TaskTemplate {
  id                  Int                @id() @default(autoincrement())
  companyId           Int
  name                String             @db.VarChar
  description         String?            @db.VarChar
  plannedDuration     Int?
  time                DateTime           @db.Timestamptz(6)
  routeId             Int?
  userShiftTemplateId Int?
  userShiftTemplate   UserShiftTemplate? @relation(fields: [userShiftTemplateId], references: [id])
  route               Route?             @relation(fields: [routeId], references: [id])
  createdAt           DateTime           @default(now()) @db.Timestamptz(6)
  updatedAt           DateTime           @updatedAt @db.Timestamptz(6)
  deletedAt           DateTime?          @db.Timestamptz(6)

  @@map("task_templates")
}

model UserShiftRoute {
  id                        Int                        @id(map: "PK_b1ccc2cbf70da8d383b0b7bab04") @default(autoincrement())
  companyId                 Int
  name                      String                     @db.VarChar
  description               String?                    @db.VarChar
  zoneId                    Int
  durationBefore            Int?                       @db.SmallInt
  durationAfter             Int?                       @db.SmallInt
  task                      Task?
  userShiftRouteCheckpoints UserShiftRouteCheckpoint[]
  createdAt                 DateTime                   @default(now()) @db.Timestamptz(6)
  updatedAt                 DateTime                   @updatedAt @db.Timestamptz(6)
  deletedAt                 DateTime?                  @db.Timestamptz(6)

  @@map("user_shift_routes")
}

model UserShiftRouteCheckpoint {
  id               Int               @id() @default(autoincrement())
  companyId        Int
  state            queue_states_enum @default(WAITING)
  comment          String?           @db.VarChar
  time             Int
  finishedAt       DateTime?         @db.Timestamptz(6)
  noPenaltyTime    Int?
  checkpointId     Int
  notifiedAt       DateTime?         @db.Timestamptz(6)
  warnedAt         DateTime?         @db.Timestamptz(6)
  sortIndex        Int               @default(0)
  userShiftRouteId Int
  userShiftRoute   UserShiftRoute    @relation(fields: [userShiftRouteId], references: [id])
  checkpoint       Checkpoint        @relation(fields: [checkpointId], references: [id])
  createdAt        DateTime          @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime          @updatedAt @db.Timestamptz(6)
  deletedAt        DateTime?         @db.Timestamptz(6)

  @@map("user_shift_route_checkpoints")
}

model UserShiftEquipment {
  id          Int       @id() @default(autoincrement())
  createdAt   DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime  @updatedAt @db.Timestamptz(6)
  deletedAt   DateTime? @db.Timestamptz(6)
  companyId   Int
  acceptedAt  DateTime? @db.Timestamptz(6)
  returnedAt  DateTime? @db.Timestamptz(6)
  equipmentId Int
  equipment   Equipment @relation(fields: [equipmentId], references: [id])
  userId      Int
  user        User      @relation(fields: [userId], references: [id])
  userShiftId Int
  userShift   UserShift @relation(fields: [userShiftId], references: [id])

  @@unique([userShiftId, equipmentId])
  @@map("user_shift_equipment")
}

//
// system.prisma
//

model Navigation {
  id            Int             @id() @default(autoincrement())
  parentId      Int?
  name          String          @db.VarChar
  url           String          @db.VarChar
  sortIndex     Int             @default(0)
  badge         Json?           @db.Json
  navigationAcl NavigationAcl[]
  createdAt     DateTime        @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime        @updatedAt @db.Timestamptz(6)

  @@map("navigation")
}

model NavigationAcl {
  id           Int        @id() @default(autoincrement())
  navigationId Int
  aclId        String     @db.VarChar
  acl          Acl        @relation(fields: [aclId], references: [id])
  navigation   Navigation @relation(fields: [navigationId], references: [id])
  createdAt    DateTime   @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime   @updatedAt @db.Timestamptz(6)

  @@map("navigation_acl")
}

enum basic_state_enum {
  INACTIVE
  ACTIVE
  DELETED
}

enum field_datatype_enum {
  NUMBER
  STRING
  DATE
  BOOLEAN
  FILES
  SELECT
}

enum priority_enum {
  LOW
  NORMAL
  HIGH
  CRITICAL
}

//
// user.prisma
//

model User {
  id                          Int                      @id() @default(autoincrement())
  state                       user_state_enum          @default(INACTIVE)
  uuid                        String                   @default(uuid())
  phone                       String                   @unique @db.VarChar
  isPhoneVerified             Boolean                  @default(false)
  isRequiredDocumentsUploaded Boolean                  @default(false)
  password                    String                   @db.VarChar
  email                       String?                  @db.VarChar
  isEmailVerified             Boolean?
  firstName                   String?                  @db.VarChar
  middleName                  String?                  @db.VarChar
  lastName                    String?                  @db.VarChar
  avatar                      String?                  @db.VarChar
  acceptedTermsOfUse          DateTime?                @db.Timestamp(6)
  jobTitleId                  Int
  jobTitle                    JobTitle                 @relation(fields: [jobTitleId], references: [id])
  facilityId                  Int
  facility                    Facility                 @relation(fields: [facilityId], references: [id])
  departmentId                Int
  department                  Department               @relation(fields: [departmentId], references: [id])
  acl                         UserACL[]
  devices                     UserDevice[]
  company                     Company?
  sessions                    UserSession[]
  documents                   UserDocument[]
  documentValidations         UserDocumentValidation[]
  hiringStageId               Int?
  hiringStage                 HiringStage?             @relation(fields: [hiringStageId], references: [id])
  notifications               Notification[]           @relation("recipientUser")
  sentNotifications           Notification[]           @relation("senderUser")
  createdAt                   DateTime                 @default(now()) @db.Timestamptz(6)
  updatedAt                   DateTime                 @updatedAt @db.Timestamptz(6)
  deletedAt                   DateTime?                @db.Timestamptz(6)
  assignedTasks               Task[]                   @relation("task_userIdTouser")
  reportedTasks               Task[]                   @relation("task_reporterIdTouser")
  certifications              UserCertification[]
  UserShift                   UserShift[]
  UserShiftEquipment          UserShiftEquipment[]

  @@map("users")
}

model UserSession {
  id           String     @id() @db.VarChar
  ip           String?    @db.VarChar
  userId       Int
  deviceId     Int
  companyId    Int
  userDevice   UserDevice @relation(fields: [deviceId], references: [id])
  user         User       @relation(fields: [userId], references: [id])
  company      Company    @relation(fields: [companyId], references: [id])
  createdAt    DateTime   @default(now()) @db.Timestamptz(6)
  lastActiveAt DateTime   @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime   @updatedAt @db.Timestamptz(6)
  deletedAt    DateTime?  @db.Timestamptz(6)

  @@map("user_sessions")
}

model UserACL {
  id        Int      @id() @default(autoincrement())
  userId    Int
  aclId     String   @db.VarChar
  acl       Acl      @relation(fields: [aclId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)

  @@unique([userId, aclId])
  @@map("user_acl")
}

model UserDevice {
  id              Int                             @id() @default(autoincrement())
  userId          Int?
  deviceId        String                          @db.VarChar
  localeId        Int?
  installId       String?                         @db.VarChar
  bundleId        String?                         @db.VarChar
  brand           String?                         @db.VarChar
  name            String?                         @db.VarChar
  deviceModel     String?                         @db.VarChar
  installReferrer String?                         @db.VarChar
  vendor          String?                         @db.VarChar
  os              String?                         @db.VarChar
  osVersion       String?                         @db.VarChar
  appVersion      String?                         @db.VarChar
  httpAgent       String?                         @db.VarChar
  pushToken       String?                         @db.VarChar
  pushTokenType   user_device_pushtokentype_enum?
  user            User?                           @relation(fields: [userId], references: [id])
  userSession     UserSession[]
  createdAt       DateTime                        @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime                        @updatedAt @db.Timestamptz(6)
  deletedAt       DateTime?                       @db.Timestamptz(6)

  @@unique([userId, deviceId], map: "userDevice_userId_deviceId")
  @@map("user_devices")
}

model Confirmation {
  id        Int                     @id() @default(autoincrement())
  userId    Int
  phone     String?                 @db.VarChar
  email     String?                 @db.VarChar
  key       String                  @db.VarChar
  code      String                  @db.VarChar
  state     confirmation_state_enum @default(SENT)
  createdAt DateTime                @default(now()) @db.Timestamptz(6)
  updatedAt DateTime                @updatedAt @db.Timestamptz(6)

  @@map("confirmations")
}

enum confirmation_state_enum {
  SENT
  VALIDATED
  CANCELLED
  EXPIRED
  BLOCKED
}

enum user_device_pushtokentype_enum {
  FIREBASE
  APNS
  WEBPUSH
  EXPO
}

enum user_state_enum {
  INACTIVE
  ACTIVE
  DELETED
}

model Certification {
  id                 String              @id() @db.VarChar
  parentId           String?             @db.VarChar
  parent             Certification?      @relation("certificationToCertification", fields: [parentId], references: [id])
  children           Certification[]     @relation("certificationToCertification")
  userCertifications UserCertification[]
  createdAt          DateTime            @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime            @updatedAt @db.Timestamptz(6)

  @@map("certifications")
}

model UserCertification {
  id              Int           @id() @default(autoincrement())
  userId          Int
  user            User          @relation(fields: [userId], references: [id])
  certificationId String        @db.VarChar
  certification   Certification @relation(fields: [certificationId], references: [id])

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)

  @@unique([userId, certificationId])
  @@map("user_certifications")
}

//
// warehouse.prisma
//

model Equipment {
  createdAt          DateTime              @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime              @updatedAt @db.Timestamptz(6)
  id                 Int                   @id() @default(autoincrement())
  deletedAt          DateTime?             @db.Timestamptz(6)
  companyId          Int
  state              basic_state_enum      @default(INACTIVE)
  name               String                @default("") @db.VarChar
  categoryId         Int
  totalCount         Int                   @default(0)
  issuedCount        Int                   @default(0)
  preview            String?               @db.VarChar
  category           EquipmentCategory     @relation(fields: [categoryId], references: [id])
  fieldValues        EquipmentFieldValue[]
  userShiftEquipment UserShiftEquipment[]
  // TODO:
  // user_equipment         user_equipment[]

  @@map("equipment")
}

model EquipmentCategory {
  id          Int                      @id() @default(autoincrement())
  createdAt   DateTime                 @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime                 @updatedAt @db.Timestamptz(6)
  deletedAt   DateTime?                @db.Timestamptz(6)
  state       basic_state_enum         @default(INACTIVE)
  name        String                   @db.VarChar
  description String?                  @db.VarChar
  color       String?                  @db.VarChar
  icon        String?                  @db.VarChar
  parentId    Int?
  sortIndex   Int                      @default(0)
  companyId   Int
  equipment   Equipment[]
  fields      EquipmentCategoryField[]

  @@map("equipment_categories")
}

model EquipmentCategoryField {
  id         Int                   @id() @default(autoincrement())
  dataType   field_datatype_enum   @default(STRING)
  name       String                @db.VarChar
  options    Json?                 @db.Json
  title      String?               @db.VarChar
  sortIndex  Int                   @default(0)
  group      String?               @db.VarChar
  validation Json?                 @db.Json
  categoryId Int
  createdAt  DateTime              @default(now()) @db.Timestamptz(6)
  updatedAt  DateTime              @updatedAt @db.Timestamptz(6)
  deletedAt  DateTime?             @db.Timestamptz(6)
  companyId  Int
  category   EquipmentCategory     @relation(fields: [categoryId], references: [id])
  values     EquipmentFieldValue[]

  @@map("equipment_category_fields")
}

model EquipmentFieldValue {
  id            Int                     @id() @default(autoincrement())
  value         String
  entityId      Int
  fieldId       Int?
  deletedAt     DateTime?               @db.Timestamptz(6)
  companyId     Int
  createdAt     DateTime                @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime                @updatedAt @db.Timestamptz(6)
  equipment     Equipment               @relation(fields: [entityId], references: [id])
  categoryField EquipmentCategoryField? @relation(fields: [fieldId], references: [id])

  @@unique([fieldId, entityId], map: "equipment_categories_field_equipment")
  @@map("equipment_field_values")
}
